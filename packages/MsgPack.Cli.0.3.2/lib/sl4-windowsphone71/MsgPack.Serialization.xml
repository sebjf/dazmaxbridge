<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MsgPack.Serialization</name>
    </assembly>
    <members>
        <member name="T:System.Diagnostics.Contracts.Contract">
            <summary>
            	Compatibility Mock.
            </summary>
        </member>
        <member name="T:System.Diagnostics.Contracts.PureAttribute">
            <summary>
            	Compatibility Mock.
            </summary>
        </member>
        <member name="T:System.Diagnostics.Contracts.ContractClassAttribute">
            <summary>
            	Compatibility Mock.
            </summary>
        </member>
        <member name="T:System.Diagnostics.Contracts.ContractClassForAttribute">
            <summary>
            	Compatibility Mock.
            </summary>
        </member>
        <member name="T:MsgPack.Serialization.LockRecursionPolicy">
            <summary>
            	System.Threading.LockRecursionPolicy alternative.
            </summary>
        </member>
        <member name="T:MsgPack.Serialization.ReaderWriterLockSlim">
            <summary>
            	System.Threading.ReaderWriterLockSlim alternative.
            </summary>
        </member>
        <member name="T:MsgPack.Serialization.SourceLevels">
            <summary>
            	System.Diagnostics.SourceLevels alternative.
            </summary>
        </member>
        <member name="T:MsgPack.Serialization.SourceSwitch">
            <summary>
            	System.Diagnostics.SourceSwitch alternative.
            </summary>
        </member>
        <member name="T:MsgPack.Serialization.TraceEventType">
            <summary>
            	System.Diagnostics.TraceEventType alternative.
            </summary>
        </member>
        <member name="T:MsgPack.Serialization.TraceSource">
            <summary>
            	System.Diagnostics.TraceSource alternative.
            </summary>
        </member>
        <member name="T:MsgPack.PackerUnpackerExtensions">
            <summary>
            	Defines extension method to pack or unpack various objects.
            </summary>
        </member>
        <member name="M:MsgPack.PackerUnpackerExtensions.Pack``1(MsgPack.Packer,``0)">
            <summary>
            	Packs specified value with the default context.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="source">The <see cref="T:MsgPack.Packer"/>.</param>
            <param name="value">The value to be serialized.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            	Cannot serialize <paramref name="value"/>.
            </exception>
        </member>
        <member name="M:MsgPack.PackerUnpackerExtensions.Pack``1(MsgPack.Packer,``0,MsgPack.Serialization.SerializationContext)">
            <summary>
            	Packs specified value with the specified context.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="source">The <see cref="T:MsgPack.Packer"/>.</param>
            <param name="value">The value to be serialized.</param>
            <param name="context">The <see cref="T:MsgPack.Serialization.SerializationContext"/> holds shared serializers.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> is <c>null</c>.
            	Or <paramref name="context"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            	Cannot serialize <paramref name="value"/>.
            </exception>
        </member>
        <member name="M:MsgPack.PackerUnpackerExtensions.PackObject(MsgPack.Packer,System.Object)">
            <summary>
            	Packs specified value with the default context.
            </summary>
            <param name="source">The <see cref="T:MsgPack.Packer"/>.</param>
            <param name="value">The value to be serialized.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            	Cannot serialize <paramref name="value"/>.
            </exception>
        </member>
        <member name="M:MsgPack.PackerUnpackerExtensions.PackObject(MsgPack.Packer,System.Object,MsgPack.Serialization.SerializationContext)">
            <summary>
            	Packs specified value with the specified context.
            </summary>
            <param name="source">The <see cref="T:MsgPack.Packer"/>.</param>
            <param name="value">The value to be serialized.</param>
            <param name="context">The <see cref="T:MsgPack.Serialization.SerializationContext"/> holds shared serializers.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> is <c>null</c>.
            	Or <paramref name="context"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            	Cannot serialize <paramref name="value"/>.
            </exception>
        </member>
        <member name="M:MsgPack.PackerUnpackerExtensions.Unpack``1(MsgPack.Unpacker)">
            <summary>
            	Unpacks specified type value with the default context.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="source">The <see cref="T:MsgPack.Unpacker"/>.</param>
            <returns>The deserialized value.</returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            	Cannot deserialize <typeparamref name="T"/> value.
            </exception>
        </member>
        <member name="M:MsgPack.PackerUnpackerExtensions.Unpack``1(MsgPack.Unpacker,MsgPack.Serialization.SerializationContext)">
            <summary>
            	Unpacks specified type value with the specified context.
            </summary>
            <typeparam name="T">The type of the value.</typeparam>
            <param name="source">The <see cref="T:MsgPack.Unpacker"/>.</param>
            <param name="context">The <see cref="T:MsgPack.Serialization.SerializationContext"/> holds shared serializers.</param>
            <returns>The deserialized value.</returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="source"/> is <c>null</c>.
            	Or <paramref name="context"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            	Cannot deserialize <typeparamref name="T"/> value.
            </exception>
        </member>
        <member name="T:MsgPack.Serialization.AutoMessagePackSerializer`1">
            <summary>
            	<see cref="T:MsgPack.Serialization.MessagePackSerializer`1"/> based on reflection, opt-out based.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:MsgPack.Serialization.MessagePackSerializer`1">
            <summary>
            	Defines base contract for object serialization.
            </summary>
            <typeparam name="T">Target type.</typeparam>
            <remarks>
            	<para>
            		This class implements strongly typed serialization and deserialization.
            	</para>
            	<para>
            		When the underlying stream does not contain strongly typed or contains dynamically typed objects,
            		you should use <see cref="T:MsgPack.Unpacker"/> directly and take advantage of <see cref="T:MsgPack.MessagePackObject"/>.
            	</para>
            </remarks>
            <seealso cref="T:MsgPack.Unpacker"/>
            <seealso cref="T:MsgPack.Unpacking"/>
        </member>
        <member name="T:MsgPack.Serialization.IMessagePackSerializer">
            <summary>
            	Defines non-generic message pack serializer interface.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.IMessagePackSerializer.PackTo(MsgPack.Packer,System.Object)">
            <summary>
            	Serialize specified object with specified <see cref="T:MsgPack.Packer"/>.
            </summary>
            <param name="packer"><see cref="T:MsgPack.Packer"/> which packs values in <paramref name="objectTree"/>.</param>
            <param name="objectTree">Object to be serialized.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="packer"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="objectTree"/> is not compatible for this serializer.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            	The type of <paramref name="objectTree"/> is not serializable etc.
            </exception>
        </member>
        <member name="M:MsgPack.Serialization.IMessagePackSerializer.UnpackFrom(MsgPack.Unpacker)">
            <summary>
            	Deserialize object with specified <see cref="T:MsgPack.Unpacker"/>.
            </summary>
            <param name="unpacker"><see cref="T:MsgPack.Unpacker"/> which unpacks values of resulting object tree.</param>
            <returns>Deserialized object.</returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="unpacker"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            	Failed to deserialize object due to invalid unpacker state, stream content, or so.
            </exception>
            <exception cref="T:MsgPack.MessageTypeException">
            	Failed to deserialize object due to invalid unpacker state, stream content, or so.
            </exception>
            <exception cref="T:MsgPack.InvalidMessagePackStreamException">
            	Failed to deserialize object due to invalid unpacker state, stream content, or so.
            </exception>
            <exception cref="T:System.NotSupportedException">
            	Deserializing type is abstract type.
            </exception>
        </member>
        <member name="M:MsgPack.Serialization.IMessagePackSerializer.UnpackTo(MsgPack.Unpacker,System.Object)">
            <summary>
            	Deserialize collection items with specified <see cref="T:MsgPack.Unpacker"/> and stores them to <paramref name="collection"/>.
            </summary>
            <param name="unpacker"><see cref="T:MsgPack.Unpacker"/> which unpacks values of resulting object tree.</param>
            <param name="collection">Collection that the items to be stored.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="unpacker"/> is <c>null</c>.
            	Or <paramref name="collection"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.ArgumentException">
            	<paramref name="collection"/> is not compatible for this serializer.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            	Failed to deserialize object due to invalid unpacker state, stream content, or so.
            </exception>
            <exception cref="T:MsgPack.MessageTypeException">
            	Failed to deserialize object due to invalid unpacker state, stream content, or so.
            </exception>
            <exception cref="T:MsgPack.InvalidMessagePackStreamException">
            	Failed to deserialize object due to invalid unpacker state, stream content, or so.
            </exception>
            <exception cref="T:System.NotSupportedException">
            	The type of <paramref name="collection"/> is not serializable etc.
            </exception>
        </member>
        <member name="T:MsgPack.Serialization.IMessagePackSingleObjectSerializer">
            <summary>
            	Defines non-generic message pack serializer interface for byte array which contains a single object.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.IMessagePackSingleObjectSerializer.PackSingleObject(System.Object)">
            <summary>
            	Serialize specified object to the array of <see cref="T:System.Byte"/>.
            </summary>
            <param name="objectTree">Object to be serialized.</param>
            <returns>An array of <see cref="T:System.Byte"/> which stores serialized value.</returns>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            	<paramref name="objectTree"/> is not serializable etc.
            </exception>
        </member>
        <member name="M:MsgPack.Serialization.IMessagePackSingleObjectSerializer.UnpackSingleObject(System.Byte[])">
            <summary>
            	Deserialize a single object from the array of <see cref="T:System.Byte"/> which contains a serialized object.
            </summary>
            <param name="buffer">An array of <see cref="T:System.Byte"/> serialized value to be stored.</param>
            <returns>A bytes of serialized binary.</returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="buffer"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            	Failed to deserialize object due to invalid unpacker state, stream content, or so.
            </exception>
            <exception cref="T:MsgPack.MessageTypeException">
            	Failed to deserialize object due to invalid unpacker state, stream content, or so.
            </exception>
            <exception cref="T:MsgPack.InvalidMessagePackStreamException">
            	Failed to deserialize object due to invalid unpacker state, stream content, or so.
            </exception>
            <remarks>
            	<para>
            		This method assumes that <paramref name="buffer"/> contains single serialized object dedicatedly,
            		so this method does not return any information related to actual consumed bytes.
            	</para>
            	<para>
            		This method is a counter part of <see cref="M:MsgPack.Serialization.IMessagePackSingleObjectSerializer.PackSingleObject(System.Object)"/>.
            	</para>
            </remarks>	
        </member>
        <member name="M:MsgPack.Serialization.MessagePackSerializer`1.Pack(System.IO.Stream,`0)">
            <summary>
            	Serialize specified object to the <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">Destination <see cref="T:System.IO.Stream"/>.</param>
            <param name="objectTree">Object to be serialized.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="stream"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            	<typeparamref name="T"/> is not serializable etc.
            </exception>
        </member>
        <member name="M:MsgPack.Serialization.MessagePackSerializer`1.Unpack(System.IO.Stream)">
            <summary>
            	Deserialize object from the <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">Source <see cref="T:System.IO.Stream"/>.</param>
            <returns>Deserialized object.</returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="stream"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            	<typeparamref name="T"/> is not serializable etc.
            </exception>
        </member>
        <member name="M:MsgPack.Serialization.MessagePackSerializer`1.PackTo(MsgPack.Packer,`0)">
            <summary>
            	Serialize specified object with specified <see cref="T:MsgPack.Packer"/>.
            </summary>
            <param name="packer"><see cref="T:MsgPack.Packer"/> which packs values in <paramref name="objectTree"/>.</param>
            <param name="objectTree">Object to be serialized.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="packer"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            	<typeparamref name="T"/> is not serializable etc.
            </exception>
        </member>
        <member name="M:MsgPack.Serialization.MessagePackSerializer`1.PackToCore(MsgPack.Packer,`0)">
            <summary>
            	Serialize specified object with specified <see cref="T:MsgPack.Packer"/>.
            </summary>
            <param name="packer"><see cref="T:MsgPack.Packer"/> which packs values in <paramref name="objectTree"/>. This value will not be <c>null</c>.</param>
            <param name="objectTree">Object to be serialized.</param>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            	<typeparamref name="T"/> is not serializable etc.
            </exception>
        </member>
        <member name="M:MsgPack.Serialization.MessagePackSerializer`1.UnpackFrom(MsgPack.Unpacker)">
            <summary>
            	Deserialize object with specified <see cref="T:MsgPack.Unpacker"/>.
            </summary>
            <param name="unpacker"><see cref="T:MsgPack.Unpacker"/> which unpacks values of resulting object tree.</param>
            <returns>Deserialized object.</returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="unpacker"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            	Failed to deserialize object due to invalid unpacker state, stream content, or so.
            </exception>
            <exception cref="T:MsgPack.MessageTypeException">
            	Failed to deserialize object due to invalid unpacker state, stream content, or so.
            </exception>
            <exception cref="T:MsgPack.InvalidMessagePackStreamException">
            	Failed to deserialize object due to invalid unpacker state, stream content, or so.
            </exception>
            <exception cref="T:System.NotSupportedException">
            	<typeparamref name="T"/> is abstract type.
            </exception>
        </member>
        <member name="M:MsgPack.Serialization.MessagePackSerializer`1.UnpackFromCore(MsgPack.Unpacker)">
            <summary>
            	Deserialize object with specified <see cref="T:MsgPack.Unpacker"/>.
            </summary>
            <param name="unpacker"><see cref="T:MsgPack.Unpacker"/> which unpacks values of resulting object tree. This value will not be <c>null</c>.</param>
            <returns>Deserialized object.</returns>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            	Failed to deserialize object due to invalid unpacker state, stream content, or so.
            </exception>
            <exception cref="T:MsgPack.MessageTypeException">
            	Failed to deserialize object due to invalid unpacker state, stream content, or so.
            </exception>
            <exception cref="T:MsgPack.InvalidMessagePackStreamException">
            	Failed to deserialize object due to invalid unpacker state, stream content, or so.
            </exception>
            <exception cref="T:System.NotSupportedException">
            	<typeparamref name="T"/> is abstract type.
            </exception>
        </member>
        <member name="M:MsgPack.Serialization.MessagePackSerializer`1.UnpackTo(MsgPack.Unpacker,`0)">
            <summary>
            	Deserialize collection items with specified <see cref="T:MsgPack.Unpacker"/> and stores them to <paramref name="collection"/>.
            </summary>
            <param name="unpacker"><see cref="T:MsgPack.Unpacker"/> which unpacks values of resulting object tree.</param>
            <param name="collection">Collection that the items to be stored.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="unpacker"/> is <c>null</c>.
            	Or <paramref name="collection"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            	Failed to deserialize object due to invalid unpacker state, stream content, or so.
            </exception>
            <exception cref="T:MsgPack.MessageTypeException">
            	Failed to deserialize object due to invalid unpacker state, stream content, or so.
            </exception>
            <exception cref="T:MsgPack.InvalidMessagePackStreamException">
            	Failed to deserialize object due to invalid unpacker state, stream content, or so.
            </exception>
            <exception cref="T:System.NotSupportedException">
            	<typeparamref name="T"/> is not collection.
            </exception>
        </member>
        <member name="M:MsgPack.Serialization.MessagePackSerializer`1.UnpackToCore(MsgPack.Unpacker,`0)">
            <summary>
            	Deserialize collection items with specified <see cref="T:MsgPack.Unpacker"/> and stores them to <paramref name="collection"/>.
            </summary>
            <param name="unpacker"><see cref="T:MsgPack.Unpacker"/> which unpacks values of resulting object tree. This value will not be <c>null</c>.</param>
            <param name="collection">Collection that the items to be stored. This value will not be <c>null</c>.</param>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            	Failed to deserialize object due to invalid unpacker state, stream content, or so.
            </exception>
            <exception cref="T:System.NotSupportedException">
            	<typeparamref name="T"/> is not collection.
            </exception>
        </member>
        <member name="M:MsgPack.Serialization.MessagePackSerializer`1.PackSingleObject(`0)">
            <summary>
            	Serialize specified object to the array of <see cref="T:System.Byte"/>.
            </summary>
            <param name="objectTree">Object to be serialized.</param>
            <returns>An array of <see cref="T:System.Byte"/> which stores serialized value.</returns>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            	<typeparamref name="T"/> is not serializable etc.
            </exception>
        </member>
        <member name="M:MsgPack.Serialization.MessagePackSerializer`1.UnpackSingleObject(System.Byte[])">
            <summary>
            	Deserialize a single object from the array of <see cref="T:System.Byte"/> which contains a serialized object.
            </summary>
            <param name="buffer">An array of <see cref="T:System.Byte"/> serialized value to be stored.</param>
            <returns>A bytes of serialized binary.</returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="buffer"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            	Failed to deserialize object due to invalid unpacker state, stream content, or so.
            </exception>
            <exception cref="T:MsgPack.MessageTypeException">
            	Failed to deserialize object due to invalid unpacker state, stream content, or so.
            </exception>
            <exception cref="T:MsgPack.InvalidMessagePackStreamException">
            	Failed to deserialize object due to invalid unpacker state, stream content, or so.
            </exception>
            <remarks>
            	<para>
            		This method assumes that <paramref name="buffer"/> contains single serialized object dedicatedly,
            		so this method does not return any information related to actual consumed bytes.
            	</para>
            	<para>
            		This method is a counter part of <see cref="M:MsgPack.Serialization.MessagePackSerializer`1.PackSingleObject(`0)"/>.
            	</para>
            </remarks>
        </member>
        <member name="M:MsgPack.Serialization.AutoMessagePackSerializer`1.#ctor(MsgPack.Serialization.SerializationContext,System.Func{MsgPack.Serialization.SerializationContext,MsgPack.Serialization.SerializerBuilder{`0}})">
            <summary>
            	Initializes a new instance of the <see cref="T:MsgPack.Serialization.AutoMessagePackSerializer`1"/> class.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.AutoMessagePackSerializer`1.PackToCore(MsgPack.Packer,`0)">
            <summary>
            	Serialize specified object with specified <see cref="T:MsgPack.Packer"/>.
            </summary>
            <param name="packer"><see cref="T:MsgPack.Packer"/> which packs values in <paramref name="objectTree"/>. This value will not be <c>null</c>.</param>
            <param name="objectTree">Object to be serialized.</param>
        </member>
        <member name="M:MsgPack.Serialization.AutoMessagePackSerializer`1.UnpackFromCore(MsgPack.Unpacker)">
            <summary>
            	Deserialize object with specified <see cref="T:MsgPack.Unpacker"/>.
            </summary>
            <param name="unpacker"><see cref="T:MsgPack.Unpacker"/> which unpacks values of resulting object tree. This value will not be <c>null</c>.</param>
            <returns>Deserialized object.</returns>
        </member>
        <member name="M:MsgPack.Serialization.AutoMessagePackSerializer`1.UnpackToCore(MsgPack.Unpacker,`0)">
            <summary>
            	Deserialize collection items with specified <see cref="T:MsgPack.Unpacker"/> and stores them to <paramref name="collection"/>.
            </summary>
            <param name="unpacker"><see cref="T:MsgPack.Unpacker"/> which unpacks values of resulting object tree. This value will not be <c>null</c>.</param>
            <param name="collection">Collection that the items to be stored. This value will not be <c>null</c>.</param>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            	Failed to deserialize object due to invalid unpacker state, stream content, or so.
            </exception>
            <exception cref="T:System.NotSupportedException">
            	<typeparamref name="T"/> is not collection.
            </exception>
        </member>
        <member name="T:MsgPack.Serialization.CallbackMessagePackSerializer`1">
            <summary>
            	Callback based <see cref="T:MsgPack.Serialization.MessagePackSerializer`1"/> to implement context-based serialization.
            </summary>
            <typeparam name="T">The type of target type.</typeparam>
        </member>
        <member name="T:MsgPack.Serialization.DataMemberContract">
            <summary>
            	Represents member's data contract.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.DataMemberContract.#ctor(System.Reflection.MemberInfo)">
            <summary>
            	Initializes a new instance of the <see cref="T:MsgPack.Serialization.DataMemberContract"/> struct.
            </summary>
            <param name="member">The target member.</param>
        </member>
        <member name="M:MsgPack.Serialization.DataMemberContract.#ctor(System.Reflection.MemberInfo,System.Runtime.Serialization.DataMemberAttribute)">
            <summary>
            	Initializes a new instance of the <see cref="T:MsgPack.Serialization.DataMemberContract"/> struct from <see cref="T:System.Runtime.Serialization.DataMemberAttribute"/>.
            </summary>
            <param name="member">The target member.</param>
            <param name="attribute">The data contract member attribute. This value can be <c>null</c>.</param>
        </member>
        <member name="M:MsgPack.Serialization.DataMemberContract.#ctor(System.Reflection.MemberInfo,MsgPack.Serialization.MessagePackMemberAttribute)">
            <summary>
            	Initializes a new instance of the <see cref="T:MsgPack.Serialization.DataMemberContract"/> struct from <see cref="T:MsgPack.Serialization.MessagePackMemberAttribute"/>.
            </summary>
            <param name="member">The target member.</param>
            <param name="attribute">The MessagePack member attribute. This value can be <c>null</c>.</param>
        </member>
        <member name="P:MsgPack.Serialization.DataMemberContract.Name">
            <summary>
            	Gets the name of the member.
            </summary>
            <value>
            	The name of the member.
            </value>
            <seealso cref="T:System.Runtime.Serialization.DataMemberAttribute"/>
        </member>
        <member name="P:MsgPack.Serialization.DataMemberContract.Id">
            <summary>
            	Gets the ID of the member.
            </summary>
            <value>
            	The ID of the member. Default is <c>-1</c>.
            </value>
        </member>
        <member name="P:MsgPack.Serialization.DataMemberContract.NilImplication">
            <summary>
            	Gets the nil implication.
            </summary>
            <value>
            	The nil implication.
            </value>
        </member>
        <member name="M:MsgPack.Serialization.DefaultSerializers.MessagePackObjectExtensions.DeserializeAsString(MsgPack.MessagePackObject)">
            <summary>
            	Invokes <see cref="M:MsgPack.MessagePackObject.AsString"/> in deserializaton manner.
            </summary>
            <param name="source"><see cref="T:MsgPack.MessagePackObject"/>.</param>
            <returns>A deserialized value.</returns>
            <exception cref="T:System.Runtime.Serialization.SerializationException"><paramref name="source"/> is not expected type.</exception>
        </member>
        <member name="T:MsgPack.Serialization.EmitterFlavor">
            <summary>
            	Determines emitter strategy.
            </summary>
        </member>
        <member name="F:MsgPack.Serialization.EmitterFlavor.ContextBased">
            <summary>
            	Uses <see cref="T:MsgPack.Serialization.SerializationContext"/> in each case of the members (de)serialization.
            	It may cause more contentions but is available in WP7.
            </summary>
        </member>
        <member name="F:MsgPack.Serialization.EmitterFlavor.FieldBased">
            <summary>
            	Caches serializers for the members (de)serialization.
            	It is default.
            </summary>
        </member>
        <member name="F:MsgPack.Serialization.EmitterFlavor.ExpressionBased">
            <summary>
            	Uses expression tree to (de)serialization.
            	It may have more overhead but is available in WinRT.
            </summary>
        </member>
        <member name="T:MsgPack.Serialization.EmittingSerializers.ArrayEmittingSerializerBuilder`1">
            <summary>
            	<see cref="T:MsgPack.Serialization.EmittingSerializers.EmittingSerializerBuilder`1"/> implementation which emits as array (default).
            </summary>
            <typeparam name="TObject">The type of the target object.</typeparam>
        </member>
        <member name="T:MsgPack.Serialization.EmittingSerializers.EmittingSerializerBuilder`1">
            <summary>
            	Implements common features code generation based serializer builders.
            </summary>
            <typeparam name="TObject">The type of the serialization target.</typeparam>
        </member>
        <member name="T:MsgPack.Serialization.SerializerBuilder`1">
            <summary>
            	Build serializer for <typeparamref name="TObject"/>.
            </summary>
            <typeparam name="TObject">Object to be serialized/deserialized.</typeparam>
        </member>
        <member name="M:MsgPack.Serialization.SerializerBuilder`1.#ctor(MsgPack.Serialization.SerializationContext)">
            <summary>
            	Initializes a new instance of the <see cref="T:MsgPack.Serialization.SerializerBuilder`1"/> class.
            </summary>
            <param name="context">The <see cref="T:MsgPack.Serialization.SerializationContext"/>.</param>
        </member>
        <member name="M:MsgPack.Serialization.SerializerBuilder`1.CreateSerializer">
            <summary>
            	Creates serializer for <typeparamref name="TObject"/>.
            </summary>
            <returns>
            	<see cref="T:MsgPack.Serialization.MessagePackSerializer`1"/>. This value will not be <c>null</c>.
            </returns>
        </member>
        <member name="M:MsgPack.Serialization.SerializerBuilder`1.CreateSerializer(MsgPack.Serialization.SerializingMember[])">
            <summary>
            	Creates serializer for <typeparamref name="TObject"/>.
            </summary>
            <param name="entries">Serialization target members. This will not be <c>null</c> nor empty.</param>
            <returns>
            	<see cref="T:MsgPack.Serialization.MessagePackSerializer`1"/>. This value will not be <c>null</c>.
            </returns>
        </member>
        <member name="M:MsgPack.Serialization.SerializerBuilder`1.CreateArraySerializer">
            <summary>
            	Creates serializer as <typeparamref name="TObject"/> is array type.
            </summary>
            <returns>
            	<see cref="T:MsgPack.Serialization.MessagePackSerializer`1"/>. 
            	This value will not be <c>null</c>.
            </returns>
        </member>
        <member name="M:MsgPack.Serialization.SerializerBuilder`1.CreateMapSerializer">
            <summary>
            	Creates serializer as <typeparamref name="TObject"/> is map type.
            </summary>
            <returns>
            	<see cref="T:MsgPack.Serialization.MessagePackSerializer`1"/>. 
            	This value will not be <c>null</c>.
            </returns>
        </member>
        <member name="M:MsgPack.Serialization.SerializerBuilder`1.CreateTupleSerializer">
            <summary>
            	Creates serializer as <typeparamref name="TObject"/> is tuple type.
            </summary>
            <returns>
            	<see cref="T:MsgPack.Serialization.MessagePackSerializer`1"/>. 
            	This value will not be <c>null</c>.
            </returns>
        </member>
        <member name="P:MsgPack.Serialization.SerializerBuilder`1.Context">
            <summary>
            	Gets the <see cref="T:MsgPack.Serialization.SerializationContext"/>.
            </summary>
            <value>
            	The <see cref="T:MsgPack.Serialization.SerializationContext"/>.
            </value>
        </member>
        <member name="M:MsgPack.Serialization.EmittingSerializers.EmittingSerializerBuilder`1.#ctor(MsgPack.Serialization.SerializationContext)">
            <summary>
            	Initializes a new instance of the <see cref="T:MsgPack.Serialization.EmittingSerializers.EmittingSerializerBuilder`1"/> class.
            </summary>
            <param name="context">The <see cref="T:MsgPack.Serialization.SerializationContext"/>.</param>
        </member>
        <member name="M:MsgPack.Serialization.EmittingSerializers.EmittingSerializerBuilder`1.CreateSerializer(MsgPack.Serialization.SerializingMember[])">
            <summary>
            	Creates serializer for <typeparamref name="TObject"/>.
            </summary>
            <param name="entries">Serialization target members. This will not be <c>null</c> nor empty.</param>
            <returns>
            	<see cref="T:MsgPack.Serialization.MessagePackSerializer`1"/>. This value will not be <c>null</c>.
            </returns>
        </member>
        <member name="M:MsgPack.Serialization.EmittingSerializers.EmittingSerializerBuilder`1.EmitPackMembers(MsgPack.Serialization.EmittingSerializers.SerializerEmitter,MsgPack.Serialization.Reflection.TracingILGenerator,MsgPack.Serialization.SerializingMember[])">
            <summary>
            	Emits the ILs to pack the members of the current type.
            </summary>
            <param name="emitter"><see cref="T:MsgPack.Serialization.EmittingSerializers.SerializerEmitter"/> holding emittion context information.</param>
            <param name="packerIL"><see cref="T:MsgPack.Serialization.Reflection.TracingILGenerator"/> to emit IL.</param>
            <param name="entries">The array of <see cref="T:MsgPack.Serialization.SerializingMember"/>s where each represents the member to be (de)serialized.</param>
        </member>
        <member name="M:MsgPack.Serialization.EmittingSerializers.EmittingSerializerBuilder`1.CreateArraySerializer">
            <summary>
            	Creates serializer as <typeparamref name="TObject"/> is array type.
            </summary>
            <returns>
            	<see cref="T:MsgPack.Serialization.MessagePackSerializer`1"/>. 
            	This value will not be <c>null</c>.
            </returns>
        </member>
        <member name="M:MsgPack.Serialization.EmittingSerializers.EmittingSerializerBuilder`1.CreateMapSerializer">
            <summary>
            	Creates serializer as <typeparamref name="TObject"/> is map type.
            </summary>
            <returns>
            	<see cref="T:MsgPack.Serialization.MessagePackSerializer`1"/>. 
            	This value will not be <c>null</c>.
            </returns>
        </member>
        <member name="M:MsgPack.Serialization.EmittingSerializers.EmittingSerializerBuilder`1.CreateTupleSerializer">
            <summary>
            	Creates serializer as <typeparamref name="TObject"/> is tuple type.
            </summary>
            <returns>
            	<see cref="T:MsgPack.Serialization.MessagePackSerializer`1"/>. 
            	This value will not be <c>null</c>.
            </returns>
        </member>
        <member name="T:MsgPack.Serialization.EmittingSerializers.ContextBasedSerializerEmitter">
            <summary>
            	<see cref="T:MsgPack.Serialization.EmittingSerializers.SerializerEmitter"/> using <see cref="T:MsgPack.Serialization.SerializationContext"/> to hold serializers for target members.
            </summary>
        </member>
        <member name="T:MsgPack.Serialization.EmittingSerializers.SerializerEmitter">
            <summary>
            	Genereates serialization methods which can be save to file.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.EmittingSerializers.SerializerEmitter.FlushTrace">
            <summary>
            	Flushes the trace.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.EmittingSerializers.SerializerEmitter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MsgPack.Serialization.EmittingSerializers.SerializerEmitter"/> class.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.EmittingSerializers.SerializerEmitter.Dispose">
            <summary>
            	Releases all managed resources.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.EmittingSerializers.SerializerEmitter.Dispose(System.Boolean)">
            <summary>
            	Releases unmanaged and optionally managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:MsgPack.Serialization.EmittingSerializers.SerializerEmitter.GetPackToMethodILGenerator">
            <summary>
            	Gets the IL generator to implement <see cref="M:MessagePackSerializer{T}.PackToCore"/> overrides.
            </summary>
            <returns>
            	The IL generator to implement <see cref="M:MessagePackSerializer{T}.PackToCore"/> overrides.
            	This value will not be <c>null</c>.
            </returns>
        </member>
        <member name="M:MsgPack.Serialization.EmittingSerializers.SerializerEmitter.GetUnpackFromMethodILGenerator">
            <summary>
            	Gets the IL generator to implement <see cref="M:MessagePackSerializer{T}.UnpackFromCore"/> overrides.
            </summary>
            <returns>
            	The IL generator to implement <see cref="M:MessagePackSerializer{T}.UnpackFromCore"/> overrides.
            	This value will not be <c>null</c>.
            </returns>
        </member>
        <member name="M:MsgPack.Serialization.EmittingSerializers.SerializerEmitter.GetUnpackToMethodILGenerator">
            <summary>
            	Gets the IL generator to implement <see cref="M:MessagePackSerializer{T}.UnpackToCore"/> overrides.
            </summary>
            <returns>
            	The IL generator to implement <see cref="M:MessagePackSerializer{T}.UnpackToCore"/> overrides.
            </returns>
            <remarks>
            	When this method is called, <see cref="M:MessagePackSerializer{T}.UnpackToCore"/> will be overridden.
            	This value will not be <c>null</c>.
            </remarks>
        </member>
        <member name="M:MsgPack.Serialization.EmittingSerializers.SerializerEmitter.CreateInstance``1(MsgPack.Serialization.SerializationContext)">
            <summary>
            	Creates the serializer type built now and returns its new instance.
            </summary>
            <typeparam name="T">Target type to be serialized/deserialized.</typeparam>
            <param name="context">The <see cref="T:MsgPack.Serialization.SerializationContext"/> to holds serializers.</param>
            <returns>
            	Newly built <see cref="T:MsgPack.Serialization.MessagePackSerializer`1"/> instance.
            	This value will not be <c>null</c>.
            </returns>
        </member>
        <member name="M:MsgPack.Serialization.EmittingSerializers.SerializerEmitter.RegisterSerializer(System.Type)">
            <summary>
            	Regisgter using <see cref="T:MsgPack.Serialization.MessagePackSerializer`1"/> target type to the current emitting session.
            </summary>
            <param name="targetType">Type to be serialized/deserialized.</param>
            <returns>
            	<see cref="T:System.Action`2"/> to emit serializer retrieval instructions.
            	The 1st argument should be <see cref="T:MsgPack.Serialization.Reflection.TracingILGenerator"/> to emit instructions.
            	The 2nd argument should be argument index of the serializer holder, normally 0 (this pointer).
            	This value will not be <c>null</c>.
            </returns>
        </member>
        <member name="P:MsgPack.Serialization.EmittingSerializers.SerializerEmitter.IsTraceEnabled">
            <summary>
            	 Gets a value indicating whether this instance is trace enabled.
            </summary>
            <value>
            	<c>true</c> if the trace enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MsgPack.Serialization.EmittingSerializers.SerializerEmitter.Trace">
            <summary>
            	Gets the <see cref="T:System.IO.TextWriter"/> for tracing.
            </summary>
            <value>
            	The <see cref="T:System.IO.TextWriter"/> for tracing.
            	This value will not be <c>null</c>.
            </value>
        </member>
        <member name="M:MsgPack.Serialization.EmittingSerializers.ContextBasedSerializerEmitter.#ctor(System.Type)">
            <summary>
            	Initializes a new instance of the <see cref="T:MsgPack.Serialization.EmittingSerializers.ContextBasedSerializerEmitter"/> class.
            </summary>
            <param name="targetType">Type of the target.</param>
        </member>
        <member name="M:MsgPack.Serialization.EmittingSerializers.ContextBasedSerializerEmitter.GetPackToMethodILGenerator">
            <summary>
            	Gets the IL generator to implement <see cref="M:MessagePackSerializer{T}.PackToCore"/> overrides.
            </summary>
            <returns>
            	The IL generator to implement <see cref="M:MessagePackSerializer{T}.PackToCore"/> overrides.
            	This value will not be <c>null</c>.
            </returns>
        </member>
        <member name="M:MsgPack.Serialization.EmittingSerializers.ContextBasedSerializerEmitter.GetUnpackFromMethodILGenerator">
            <summary>
            	Gets the IL generator to implement <see cref="M:MessagePackSerializer{T}.UnpackFromCore"/> overrides.
            </summary>
            <returns>
            	The IL generator to implement <see cref="M:MessagePackSerializer{T}.UnpackFromCore"/> overrides.
            	This value will not be <c>null</c>.
            </returns>
        </member>
        <member name="M:MsgPack.Serialization.EmittingSerializers.ContextBasedSerializerEmitter.GetUnpackToMethodILGenerator">
            <summary>
            	Gets the IL generator to implement <see cref="M:MessagePackSerializer{T}.UnpackToCore"/> overrides.
            </summary>
            <returns>
            	The IL generator to implement <see cref="M:MessagePackSerializer{T}.UnpackToCore"/> overrides.
            </returns>
        </member>
        <member name="M:MsgPack.Serialization.EmittingSerializers.ContextBasedSerializerEmitter.CreateInstance``1(MsgPack.Serialization.SerializationContext)">
            <summary>
            	Creates the serializer type built now and returns its new instance.
            </summary>
            <typeparam name="T">Target type to be serialized/deserialized.</typeparam>
            <param name="context">The <see cref="T:MsgPack.Serialization.SerializationContext"/> to holds serializers.</param>
            <returns>
            	Newly built <see cref="T:MsgPack.Serialization.MessagePackSerializer`1"/> instance.
            	This value will not be <c>null</c>.
            </returns>
        </member>
        <member name="M:MsgPack.Serialization.EmittingSerializers.ContextBasedSerializerEmitter.RegisterSerializer(System.Type)">
            <summary>
            	Regisgter using <see cref="T:MsgPack.Serialization.MessagePackSerializer`1"/> target type to the current emitting session.
            </summary>
            <param name="targetType">Type to be serialized/deserialized.</param>
            <returns>
              <see cref="T:System.Action`2"/> to emit serializer retrieval instructions.
            	The 1st argument should be <see cref="T:MsgPack.Serialization.Reflection.TracingILGenerator"/> to emit instructions.
            	The 2nd argument should be argument index of the serializer holder.
            	This value will not be <c>null</c>.
            </returns>
        </member>
        <member name="T:MsgPack.Serialization.EmittingSerializers.DefaultSerializationMethodGeneratorManager">
            <summary>
            	Manages serializer generators.
            </summary>
        </member>
        <member name="T:MsgPack.Serialization.EmittingSerializers.SerializationMethodGeneratorManager">
            <summary>
            	Defines common features and interfaces for <see cref="T:MsgPack.Serialization.EmittingSerializers.SerializationMethodGeneratorManager"/>.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.EmittingSerializers.SerializationMethodGeneratorManager.Get">
            <summary>
            	Get the appropriate <see cref="T:MsgPack.Serialization.EmittingSerializers.SerializationMethodGeneratorManager"/> for the current configuration.
            </summary>
            <returns>
            	The appropriate <see cref="T:MsgPack.Serialization.EmittingSerializers.SerializationMethodGeneratorManager"/> for the current configuration.
            	This value will not be <c>null</c>.
            </returns>
        </member>
        <member name="M:MsgPack.Serialization.EmittingSerializers.SerializationMethodGeneratorManager.Get(MsgPack.Serialization.SerializationMethodGeneratorOption)">
            <summary>
            	Get the appropriate <see cref="T:MsgPack.Serialization.EmittingSerializers.SerializationMethodGeneratorManager"/> for specified options.
            </summary>
            <param name="option"><see cref="T:MsgPack.Serialization.SerializationMethodGeneratorOption"/>.</param>
            <returns>
            	The appropriate <see cref="T:MsgPack.Serialization.EmittingSerializers.SerializationMethodGeneratorManager"/> for specified options. 
            	This value will not be <c>null</c>.
            </returns>
        </member>
        <member name="M:MsgPack.Serialization.EmittingSerializers.SerializationMethodGeneratorManager.CreateEmitter(System.Type,MsgPack.Serialization.EmitterFlavor)">
            <summary>
            	Creates new <see cref="T:MsgPack.Serialization.EmittingSerializers.SerializerEmitter"/> which corresponds to the specified <see cref="T:MsgPack.Serialization.EmitterFlavor"/>.
            </summary>
            <param name="targetType">The type of the serialization target.</param>
            <param name="emitterFlavor"><see cref="T:MsgPack.Serialization.EmitterFlavor"/>.</param>
            <returns>New <see cref="T:MsgPack.Serialization.EmittingSerializers.SerializerEmitter"/> which corresponds to the specified <see cref="T:MsgPack.Serialization.EmitterFlavor"/>.</returns>
        </member>
        <member name="M:MsgPack.Serialization.EmittingSerializers.SerializationMethodGeneratorManager.CreateEmitterCore(System.Type,MsgPack.Serialization.EmitterFlavor)">
            <summary>
            	Creates new <see cref="T:MsgPack.Serialization.EmittingSerializers.SerializerEmitter"/> which corresponds to the specified <see cref="T:MsgPack.Serialization.EmitterFlavor"/>.
            </summary>
            <param name="targetType">The type of the serialization target.</param>
            <param name="emitterFlavor"><see cref="T:MsgPack.Serialization.EmitterFlavor"/>.</param>
            <returns>New <see cref="T:MsgPack.Serialization.EmittingSerializers.SerializerEmitter"/> which corresponds to the specified <see cref="T:MsgPack.Serialization.EmitterFlavor"/>.</returns>
        </member>
        <member name="M:MsgPack.Serialization.EmittingSerializers.DefaultSerializationMethodGeneratorManager.CreateEmitterCore(System.Type,MsgPack.Serialization.EmitterFlavor)">
            <summary>
            	Creates new <see cref="T:MsgPack.Serialization.EmittingSerializers.SerializerEmitter"/> which corresponds to the specified <see cref="T:MsgPack.Serialization.EmitterFlavor"/>.
            </summary>
            <param name="targetType">The type of the serialization target.</param>
            <param name="emitterFlavor"><see cref="T:MsgPack.Serialization.EmitterFlavor"/>.</param>
            <returns>
            	New <see cref="T:MsgPack.Serialization.EmittingSerializers.SerializerEmitter"/> which corresponds to the specified <see cref="T:MsgPack.Serialization.EmitterFlavor"/>.
            </returns>
        </member>
        <member name="P:MsgPack.Serialization.EmittingSerializers.DefaultSerializationMethodGeneratorManager.Fast">
            <summary>
            	Get the singleton instance for fast mode.
            </summary>
        </member>
        <member name="T:MsgPack.Serialization.EmittingSerializers.EmittingSerializerBuilderLogics">
            <summary>
            	Defines non-generic functions of <see cref="T:MsgPack.Serialization.EmittingSerializers.EmittingSerializerBuilder`1"/>.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.EmittingSerializers.Emittion.EmitFor(MsgPack.Serialization.Reflection.TracingILGenerator,System.Reflection.Emit.LocalBuilder,System.Action{MsgPack.Serialization.Reflection.TracingILGenerator,System.Reflection.Emit.LocalBuilder})">
            <summary>
            	Emits 'for' statement on current IL stream.
            </summary>
            <param name="il">IL generator to be emitted to.</param>
            <param name="count">'count' local variable which is <see cref="T:System.Int32"/> type and holds maximum loop count.</param>
            <param name="bodyEmitter">Delegate to emit for statement body.</param>
        </member>
        <member name="M:MsgPack.Serialization.EmittingSerializers.Emittion.EmitForEach(MsgPack.Serialization.Reflection.TracingILGenerator,MsgPack.Serialization.CollectionTraits,System.Reflection.Emit.LocalBuilder,System.Action{MsgPack.Serialization.Reflection.TracingILGenerator,System.Action})">
            <summary>
            	Emits 'foreach' statement on the IL stream.
            </summary>
            <param name="il">IL generator to be emitted to.</param>
            <param name="traits"><see cref="T:MsgPack.Serialization.CollectionTraits"/> which contains traits of the iterating collection.</param>
            <param name="collection">'collection' argument index.</param>
            <param name="bodyEmitter">Delegate to emit body statement.</param>
        </member>
        <member name="M:MsgPack.Serialization.EmittingSerializers.Emittion.EmitLoadValue(MsgPack.Serialization.Reflection.TracingILGenerator,System.Reflection.MemberInfo)">
            <summary>
            	Emits appropriate loading member instructions.
            </summary>
            <param name="il">IL generator to be emitted to.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> to be loaded.</param>
        </member>
        <member name="M:MsgPack.Serialization.EmittingSerializers.Emittion.EmitStoreValue(MsgPack.Serialization.Reflection.TracingILGenerator,System.Reflection.MemberInfo)">
            <summary>
            	Emits appropriate storing member instructions.
            </summary>
            <param name="il">IL generator to be emitted to.</param>
            <param name="member"><see cref="T:System.Reflection.MemberInfo"/> to be stored.</param>
        </member>
        <member name="M:MsgPack.Serialization.EmittingSerializers.Emittion.EmitGetUnpackerItemsCountAsInt32(MsgPack.Serialization.Reflection.TracingILGenerator,System.Int32,MsgPack.Serialization.EmittingSerializers.LocalVariableHolder)">
            <summary>
            Emits gets <see cref="P:MsgPack.Unpacker.ItemsCount"/> with exception handling.
            Note that final state is the value is pushed top of the evaluation stack.
            </summary>
            <param name="il">IL generator.</param>
            <param name="unpackerArgumentIndex">Argument index of the unpacker.</param>
            <param name="localHolder">The <see cref="T:MsgPack.Serialization.EmittingSerializers.LocalVariableHolder"/> which holds shared local variable information.</param>
        </member>
        <member name="M:MsgPack.Serialization.EmittingSerializers.Emittion.EmitSerializeValue(MsgPack.Serialization.EmittingSerializers.SerializerEmitter,MsgPack.Serialization.Reflection.TracingILGenerator,System.Int32,System.Type,System.String,MsgPack.Serialization.NilImplication,System.Action{MsgPack.Serialization.Reflection.TracingILGenerator},MsgPack.Serialization.EmittingSerializers.LocalVariableHolder)">
            <summary>
            	Emits the serializing value instructions.
            </summary>
            <param name="emitter">The emitter.</param>
            <param name="il">The il generator.</param>
            <param name="packerArgumentIndex">Index of the packer argument.</param>
            <param name="valueType">Type of the current member value.</param>
            <param name="memberName">Name of the current member.</param>
            <param name="nilImplication">The nil implication of the current member.</param>
            <param name="loadValueEmitter">The delegate which emits case specific value loading instructions.</param>
            <param name="localHolder">The <see cref="T:MsgPack.Serialization.EmittingSerializers.LocalVariableHolder"/> which holds shared local variable information.</param>
        </member>
        <member name="M:MsgPack.Serialization.EmittingSerializers.Emittion.EmitDeserializeValue(MsgPack.Serialization.EmittingSerializers.SerializerEmitter,MsgPack.Serialization.Reflection.TracingILGenerator,System.Int32,System.Reflection.Emit.LocalBuilder,MsgPack.Serialization.SerializingMember,MsgPack.Serialization.EmittingSerializers.LocalVariableHolder)">
            <summary>
            Emits the deserialize value.
            </summary>
            <param name="emitter">The emitter.</param>
            <param name="il">The il generator.</param>
            <param name="unpackerArgumentIndex">Index of the unpacker argument.</param>
            <param name="result">The result local variable which represents the result of deserialization.</param>
            <param name="member">The metadata for nil implication. Specify <c>null</c> if nil implication is not needed.</param>
            <param name="localHolder">The <see cref="T:MsgPack.Serialization.EmittingSerializers.LocalVariableHolder"/> which holds shared local variable information.</param>
        </member>
        <member name="M:MsgPack.Serialization.EmittingSerializers.Emittion.EmitDeserializeValueWithoutNilImplication(MsgPack.Serialization.EmittingSerializers.SerializerEmitter,MsgPack.Serialization.Reflection.TracingILGenerator,System.Int32,System.Reflection.Emit.LocalBuilder,System.Type,System.String,MsgPack.Serialization.EmittingSerializers.LocalVariableHolder)">
            <summary>
            	Emits deserializing value instructions.
            </summary>
            <param name="emitter">The emitter.</param>
            <param name="il">The il generator.</param>
            <param name="unpackerArgumentIndex">Index of the unpacker argument.</param>
            <param name="value">The value local variable which stores unpacked value.</param>
            <param name="targetType">The type of deserialzing type.</param>
            <param name="memberName">The name of the member.</param>
            <param name="localHolder">The <see cref="T:MsgPack.Serialization.EmittingSerializers.LocalVariableHolder"/> which holds shared local variable information.</param>
        </member>
        <member name="M:MsgPack.Serialization.EmittingSerializers.Emittion.EmitDeserializeValueCore(MsgPack.Serialization.EmittingSerializers.SerializerEmitter,MsgPack.Serialization.Reflection.TracingILGenerator,System.Int32,System.Reflection.Emit.LocalBuilder,System.Type,System.Nullable{MsgPack.Serialization.SerializingMember},System.String,System.Reflection.Emit.Label,MsgPack.Serialization.EmittingSerializers.LocalVariableHolder)">
            <summary>
            Emits the deserialize value.
            </summary>
            <param name="emitter">The emitter.</param>
            <param name="il">The il generator.</param>
            <param name="unpackerArgumentIndex">Index of the unpacker argument.</param>
            <param name="value">The value local variable which stores unpacked value.</param>
            <param name="targetType">The type of deserialzing type.</param>
            <param name="member">The metadata for nil implication. Specify <c>null</c> if nil implication is not needed.</param>
            <param name="memberName">The name of the member.</param>
            <param name="endOfDeserialization">The end of deserialization label for nil implication.</param>
            <param name="localHolder">The <see cref="T:MsgPack.Serialization.EmittingSerializers.LocalVariableHolder"/> which holds shared local variable information.</param>
        </member>
        <member name="M:MsgPack.Serialization.EmittingSerializers.Emittion.EmitUnpackFrom(MsgPack.Serialization.EmittingSerializers.SerializerEmitter,MsgPack.Serialization.Reflection.TracingILGenerator,System.Reflection.Emit.LocalBuilder,System.Int32)">
            <summary>
            	Emits unpacking method with flavor specific getter.
            </summary>
            <param name="emitter">SerializerEmitter which knows the emittion flavor.</param>
            <param name="il">The il generator.</param>
            <param name="result">A variable wich stores unpacked result.</param>
            <param name="unpackerIndex">The argument index which stores current Unpacker.</param>
        </member>
        <member name="M:MsgPack.Serialization.EmittingSerializers.Emittion.EmitUnpackFrom(MsgPack.Serialization.EmittingSerializers.SerializerEmitter,MsgPack.Serialization.Reflection.TracingILGenerator,System.Reflection.Emit.LocalBuilder,System.Reflection.Emit.LocalBuilder)">
            <summary>
            	Emits unpacking method with flavor specific getter.
            </summary>
            <param name="emitter">SerializerEmitter which knows the emittion flavor.</param>
            <param name="il">The il generator.</param>
            <param name="result">A variable wich stores unpacked result.</param>
            <param name="unpacker">The local variable which stores current Unpacker.</param>
        </member>
        <member name="M:MsgPack.Serialization.EmittingSerializers.Emittion.EmitNilImplication(MsgPack.Serialization.Reflection.TracingILGenerator,System.Int32,System.String,MsgPack.Serialization.NilImplication,System.Reflection.Emit.Label,MsgPack.Serialization.EmittingSerializers.LocalVariableHolder)">
            <summary>
            	Emits the nil implication.
            </summary>
            <param name="il">The il generator.</param>
            <param name="unpackerArgumentIndex">Index of the unpacker argument.</param>
            <param name="memberName">Name of the deserializing member.</param>
            <param name="nilImplication">The nil implication.</param>
            <param name="endOfDeserialization">The label to the end of deserialization.</param>
            <param name="localHolder">The <see cref="T:MsgPack.Serialization.EmittingSerializers.LocalVariableHolder"/> which holds shared local variable information.</param>
        </member>
        <member name="M:MsgPack.Serialization.EmittingSerializers.Emittion.EmitDeserializeCollectionValue(MsgPack.Serialization.EmittingSerializers.SerializerEmitter,MsgPack.Serialization.Reflection.TracingILGenerator,System.Int32,System.Reflection.Emit.LocalBuilder,System.Reflection.MemberInfo,System.Type,MsgPack.Serialization.NilImplication,MsgPack.Serialization.EmittingSerializers.LocalVariableHolder)">
            <summary>
            Emits the deserialize collection value.
            </summary>
            <param name="emitter">The emitter.</param>
            <param name="il">The il generator.</param>
            <param name="unpackerArgumentIndex">Index of the unpacker argument.</param>
            <param name="target">The target collection variable.</param>
            <param name="member">The deserializing member metadata which holds the collection.</param>
            <param name="memberType">Type of the deserializing member.</param>
            <param name="nilImplication">The nil implication.</param>
            <param name="localHolder">The <see cref="T:MsgPack.Serialization.EmittingSerializers.LocalVariableHolder"/> which holds shared local variable information.</param>
        </member>
        <member name="M:MsgPack.Serialization.EmittingSerializers.Emittion.EmitGeneralRead(MsgPack.Serialization.Reflection.TracingILGenerator,System.Int32)">
            <summary>
            	Emits reading next item operation from the unpacker.
            </summary>
            <param name="il">Writng IL generator.</param>
            <param name="unpackerArgumentIndex">The index of the Unpacker argument.</param>
        </member>
        <member name="T:MsgPack.Serialization.EmittingSerializers.LocalVariableHolder">
            <summary>
            	Holds reusable(temporal) local variable info.
            </summary>
        </member>
        <member name="T:MsgPack.Serialization.EmittingSerializers.MapEmittingSerializerBuilder`1">
            <summary>
            	<see cref="T:MsgPack.Serialization.EmittingSerializers.EmittingSerializerBuilder`1"/> implementation which emits as map.
            </summary>
            <typeparam name="TObject">The type of the target object.</typeparam>
        </member>
        <member name="T:MsgPack.Serialization.IdentifierUtility">
            <summary>
            	Utilities related to member/type ID.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.IdentifierUtility.BuildMethodName(System.String,System.Type,System.String)">
            <summary>
            	Builds the name of the generating method.
            </summary>
            <param name="operation">The operation.</param>
            <param name="targetType">Type of the target.</param>
            <param name="targetMemberName">Name of the target member.</param>
            <returns>Name of the method.</returns>
        </member>
        <member name="T:MsgPack.Serialization.LazyDelegatingMessagePackSerializer`1">
            <summary>
            	Lazy initialized serializer which delegates actual work for the other serializer implementation.
            </summary>
            <typeparam name="T">
            	The type of target type.
            </typeparam>
            <remarks>
            	This serializer is intended to support self-composit structure like directories or XML nodes.
            </remarks>
        </member>
        <member name="M:MsgPack.Serialization.LazyDelegatingMessagePackSerializer`1.#ctor(MsgPack.Serialization.SerializationContext)">
            <summary>
            	Initializes a new instance of the <see cref="T:MsgPack.Serialization.LazyDelegatingMessagePackSerializer`1"/> class.
            </summary>
            <param name="context">
            	The serialization context to support lazy retrieval.
            </param>
        </member>
        <member name="T:MsgPack.Serialization.MessagePackMemberAttribute">
            <summary>
            	Marks a field or a property to be serialized with MessagePack Serializer and defines some required informations to serialize.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.MessagePackMemberAttribute.#ctor(System.Int32)">
            <summary>
            	Initializes a new instance of the <see cref="T:MsgPack.Serialization.MessagePackMemberAttribute"/> class.
            </summary>
            <param name="id">
            	The ID of the member. This value cannot be negative and must be unique in the type.
            </param>
        </member>
        <member name="P:MsgPack.Serialization.MessagePackMemberAttribute.Id">
            <summary>
            	Gets the ID of the member.
            </summary>
            <value>
            	The ID of the member.
            </value>
        </member>
        <member name="P:MsgPack.Serialization.MessagePackMemberAttribute.NilImplication">
            <summary>
            	Gets or sets the implication of the nil value.
            </summary>
            <value>
            	The implication of the nil value.
            	Default value is <see cref="F:NilImplication.MemberDefault"/>.
            </value>
        </member>
        <member name="T:MsgPack.Serialization.MessagePackSerializer">
            <summary>
            	Defines entry points for <see cref="T:MsgPack.Serialization.MessagePackSerializer`1"/> usage.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.MessagePackSerializer.Create``1">
            <summary>
            	Creates new <see cref="T:MsgPack.Serialization.MessagePackSerializer`1"/> instance with <see cref="P:MsgPack.Serialization.SerializationContext.Default"/>.
            </summary>
            <typeparam name="T">Target type.</typeparam>
            <returns>
            	New <see cref="T:MsgPack.Serialization.MessagePackSerializer`1"/> instance to serialize/deserialize the object tree which the top is <typeparamref name="T"/>.
            </returns>
        </member>
        <member name="M:MsgPack.Serialization.MessagePackSerializer.Create``1(MsgPack.Serialization.SerializationContext)">
            <summary>
            	Creates new <see cref="T:MsgPack.Serialization.MessagePackSerializer`1"/> instance with specified <see cref="T:MsgPack.Serialization.SerializationContext"/>.
            </summary>
            <typeparam name="T">Target type.</typeparam>
            <param name="context">
            	<see cref="T:MsgPack.Serialization.SerializationContext"/> to store known/created serializers.
            </param>
            <returns>
            	New <see cref="T:MsgPack.Serialization.MessagePackSerializer`1"/> instance to serialize/deserialize the object tree which the top is <typeparamref name="T"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="context"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MsgPack.Serialization.MessagePackSerializer.Create(System.Type)">
            <summary>
            	Creates new <see cref="T:MsgPack.Serialization.IMessagePackSerializer"/> instance with <see cref="P:MsgPack.Serialization.SerializationContext.Default"/>.
            </summary>
            <param name="targetType">Target type.</param>
            <returns>
            	New <see cref="T:MsgPack.Serialization.IMessagePackSingleObjectSerializer"/> instance to serialize/deserialize the object tree which the top is <paramref name="targetType"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="targetType"/> is <c>null</c>.
            </exception>
            <remarks>
            	To avoid boxing and strongly typed API is prefered, use <see cref="M:MsgPack.Serialization.MessagePackSerializer.Create``1"/> instead when possible.
            </remarks>
        </member>
        <member name="M:MsgPack.Serialization.MessagePackSerializer.Create(System.Type,MsgPack.Serialization.SerializationContext)">
            <summary>
            	Creates new <see cref="T:MsgPack.Serialization.IMessagePackSerializer"/> instance with specified <see cref="T:MsgPack.Serialization.SerializationContext"/>.
            </summary>
            <param name="targetType">Target type.</param>
            <param name="context">
            	<see cref="T:MsgPack.Serialization.SerializationContext"/> to store known/created serializers.
            </param>
            <returns>
            	New <see cref="T:MsgPack.Serialization.IMessagePackSingleObjectSerializer"/> instance to serialize/deserialize the object tree which the top is <paramref name="targetType"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="targetType"/> is <c>null</c>.
            	Or, <paramref name="context"/> is <c>null</c>.
            </exception>
            <remarks>
            	To avoid boxing and strongly typed API is prefered, use <see cref="M:MsgPack.Serialization.MessagePackSerializer.Create``1(MsgPack.Serialization.SerializationContext)"/> instead when possible.
            </remarks>
        </member>
        <member name="T:MsgPack.Serialization.NilImplication">
            <summary>
            	Speifies nil implication in serialization/deserialization.
            </summary>
        </member>
        <member name="F:MsgPack.Serialization.NilImplication.MemberDefault">
            <summary>
            	A nil is interpreted as default value of the member.
            </summary>
            <remarks>
            	<para>
            		This value affects only deserialization.
            	</para>
            	<para>
            		If the unpacking value is nil, the serializer will not set any value to the member.
            	</para>
            	<para>
            		This value corresponds to <c>optional</c> on the IDL.
            	</para>
            	<note>
            		This is default option because the most safe option.
            	</note>
            </remarks>
        </member>
        <member name="F:MsgPack.Serialization.NilImplication.Null">
            <summary>
            	A nil is interpreted as <c>null</c>.
            </summary>
            <remarks>
            	<para>
            		This value affects only deserialization.
            	</para>
            	<para>
            		If the unpacking value is nil, the serializer will set <c>null</c> to the member.
            		If the member is non-nullable value type and the packed value is nil, then <see cref="T:System.Runtime.Serialization.SerializationException"/> will be thrown.
            	</para>
            	<para>
            		This value corresponds to <c>nullable required</c> on the IDL.
            	</para>
            	<note>
            		If the destination end point sends nil for the value type member like <see cref="T:System.Int32"/> type,
            		you can avoid the exception with change the type of the member to nullable value type.
            	</note>
            </remarks>
        </member>
        <member name="F:MsgPack.Serialization.NilImplication.Prohibit">
            <summary>
            	A nil is prohibitted.
            </summary>
            <remarks>
            	<para>
            		This value affects both of serialization and deserialization.
            	</para>
            	<para>
            		If the packing value is <c>null</c> or the unpacking value is nil,
            		the serializer will throw exception.
            	</para>
            	<para>
            		This value corresponds to <c>required</c> on the IDL.
            	</para>
            	<note>
            		When you specify this value to newly added member,
            		it means that you BREAK backword compatibility.
            	</note>
            </remarks>
        </member>
        <member name="T:MsgPack.Serialization.Reflection.GenericTypeExtensions">
            <summary>
            	Define utility extension method for generic type.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.GenericTypeExtensions.Implements(System.Type,System.Type)">
            <summary>
            	Determine whether the source type implements specified generic type or its built type.
            </summary>
            <param name="source">Target type.</param>
            <param name="genericType">Generic interface type.</param>
            <returns>
            	<c>true</c> if <paramref name="source"/> implements <paramref name="genericType"/>,
            	or built closed generic interface type;
            	otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.GenericTypeExtensions.GetName(System.Type)">
            <summary>
            	Get name of type without namespace and assembly name of itself and its generic arguments.
            </summary>
            <param name="source">Target type.</param>
            <returns>Simple name of type.</returns>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.GenericTypeExtensions.GetFullName(System.Type)">
            <summary>
            	Get full name of type including namespace and excluding assembly name of itself and its generic arguments.
            </summary>
            <param name="source">Target type.</param>
            <returns>Full name of type.</returns>
        </member>
        <member name="T:MsgPack.Serialization.Reflection.ReflectionExtensions">
            <summary>
            	Defines utility extension method for reflection API.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.ReflectionExtensions.IsAssignableTo(System.Type,System.Type)">
            <summary>
            	Determines whether specified <see cref="T:System.Type"/> can be assigned to source <see cref="T:System.Type"/>.
            </summary>
            <param name="source">The source type.</param>
            <param name="target">The type to compare with the source type.</param>
            <returns>
              <c>true</c> if <paramref name="source"/> and <paramref name="target"/> represent the same type, 
              or if <paramref name="target"/> is in the inheritance hierarchy of <paramref name="source"/>, 
              or if <paramref name="target"/> is an interface that <paramref name="source"/> implements, 
              or if <paramref name="source"/> is a generic type parameter and <paramref name="target"/> represents one of the constraints of <paramref name="source"/>. 
              <c>false</c> if none of these conditions are <c>true</c>, or if <paramref name="target"/> is <c>false</c>. 
            </returns>
        </member>
        <member name="T:MsgPack.Serialization.Reflection.TracingILGenerator">
            <summary>
            	<see cref="T:System.Reflection.Emit.ILGenerator"/> like IL stream builder with tracing.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitAnyCall(System.Reflection.MethodInfo)">
            <summary>
            	Emit 'call' or 'callvirt' appropriately.
            </summary>
            <param name="target"><see cref="T:System.Reflection.MethodInfo"/> to be called.</param>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitGetProperty(System.Reflection.PropertyInfo)">
            <summary>
            	Emit property getter invocation.
            	Pre condition is there is target instance on the top of evaluation stack when <paramref name="property"/> is instance property.
            	Post condition are that target instance will be removed from the stack for instance property, and property value will be placed on there.
            </summary>
            <param name="property"><see cref="T:System.Reflection.PropertyInfo"/> for target property.</param>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitCurrentCulture">
            <summary>
            	Emit <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/> invocation.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitInvariantCulture">
            <summary>
            	Emit <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/> invocation.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitGetType">
            <summary>
            	Emit <see cref="M:System.Object.GetType"/> invocation.
            	Pre condition is that target instance is placed on the top of evaluation stack.
            	Post condition is that target instance will be replaced with <see cref="T:System.Type"/> of it.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitStringFormat(System.Int32,System.String,System.Action{MsgPack.Serialization.Reflection.TracingILGenerator}[])">
            <summary>
            	Emit <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/> invocation with <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>.
            </summary>
            <param name="temporaryLocalArrayIndex">
            	Index of temporary local variable index to store param array for <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/>.
            	Note that the type of local variable must be Object[].
            </param>
            <param name="formatLiteral">Forat string literal.</param>
            <param name="argumentLoadingEmitters">
            	List of delegates to emittion of loading formatting parameter loading instruction. 
            	Index of this array corresponds to index of formatting parameter.
            	1st argument is this instance.
            	Post condition is that exactly one storing element will be added on the top of evaluation stack.
            </param>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitStringFormat(System.Int32,System.Type,System.String,System.Action{MsgPack.Serialization.Reflection.TracingILGenerator}[])">
            <summary>
            	Emit <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/> invocation with <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/>.
            </summary>
            <param name="temporaryLocalArrayIndex">
            	Index of temporary local variable index to store param array for <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/>.
            	Note that the type of local variable must be Object[].
            </param>
            <param name="resource">
            	Type of resource accessor.
            </param>
            <param name="resourceKey">
            	Key of rethis. Note that this method assumes that key equals to accessor property name.
            </param>
            <param name="argumentLoadingEmitters">
            	List of delegates to emittion of loading formatting parameter loading instruction. 
            	Index of this array corresponds to index of formatting parameter.
            	1st argument is this instance.
            	Post condition is that exactly one storing element will be added on the top of evaluation stack.
            </param>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitStringFormatInvariant(System.Int32,System.String,System.Action{MsgPack.Serialization.Reflection.TracingILGenerator}[])">
            <summary>
            	Emit <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/> invocation with <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>.
            </summary>
            <param name="temporaryLocalArrayIndex">
            	Index of temporary local variable index to store param array for <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/>.
            	Note that the type of local variable must be Object[].
            </param>
            <param name="formatLiteral">Forat string literal.</param>
            <param name="argumentLoadingEmitters">
            	List of delegates to emittion of loading formatting parameter loading instruction. 
            	Index of this array corresponds to index of formatting parameter.
            	1st argument is this instance.
            	Post condition is that exactly one storing element will be added on the top of evaluation stack.
            </param>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitStringFormatInvariant(System.Int32,System.Type,System.String,System.Action{MsgPack.Serialization.Reflection.TracingILGenerator}[])">
            <summary>
            	Emit <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/> invocation with <see cref="P:System.Globalization.CultureInfo.InvariantCulture"/>.
            </summary>
            <param name="temporaryLocalArrayIndex">
            	Index of temporary local variable index to store param array for <see cref="M:System.String.Format(System.IFormatProvider,System.String,System.Object[])"/>.
            	Note that the type of local variable must be Object[].
            </param>
            <param name="resource">
            	Type of resource accessor.
            </param>
            <param name="resourceKey">
            	Key of rethis. Note that this method assumes that key equals to accessor property name.
            </param>
            <param name="argumentLoadingEmitters">
            	List of delegates to emittion of loading formatting parameter loading instruction. 
            	Index of this array corresponds to index of formatting parameter.
            	1st argument is this instance.
            	Post condition is that exactly one storing element will be added on the top of evaluation stack.
            </param>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitLdargThis">
            <summary>
            	Emit load 'this' pointer instruction (namely 'ldarg.0').
            	Post condition is that the loaded value will be added on the evaluation stack.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitAnyLdarg(System.Int32)">
            <summary>
            	Emit apprpriate 'ldarg.*' instruction.
            	Post condition is that the loaded value will be added on the evaluation stack.
            </summary>
            <param name="argumentIndex">
            	Index of argument to be fetched.
            </param>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitAnyLdloc(System.Int32)">
            <summary>
            	Emit apprpriate 'ldloc.*' instruction.
            	Post condition is that the loaded value will be added on the evaluation stack.
            </summary>
            <param name="localIndex">
            	Index of local variable to be fetched.
            </param>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitAnyStloc(System.Int32)">
            <summary>
            	Emit array initialization code with initializer.
            	Pre condition is that the storing value is placed on the top of evaluation stack and its type is valid.
            	Post condition is that the stored value will be removed from the evaluation stack.
            </summary>
            <param name="localIndex">
            	Index of local variable which stores the array.
            </param>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitNewarr(System.Type,System.Int64)">
            <summary>
            	Emit array initialization code without initializer.
            	Post condition is evaluation stack will no be modified as previous state. 
            	Note that initialized array is not placed on the top of evaluation stack.
            </summary>
            <param name="elementType"><see cref="T:System.Type"/> of array element. This can be generaic parameter.</param>
            <param name="length">Size of array.</param>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitNewarr(System.Int32,System.Type,System.Action{MsgPack.Serialization.Reflection.TracingILGenerator}[])">
            <summary>
            	Emit array initialization code with initializer.
            	Post condition is evaluation stack will no be modified as previous state. 
            	Note that initialized array is not placed on the top of evaluation stack.
            </summary>
            <param name="arrayLocalIndex">
            	Index of local variable which stores the array.
            </param>
            <param name="elementType"><see cref="T:System.Type"/> of array element. This can be generaic parameter.</param>
            <param name="elementLoadingEmitters">
            	List of delegates to emittion of storing element loading instruction. 
            	Index of this array corresponds to index of initializing array.
            	1st argument is this instance.
            	Post condition is that exactly one storing element will be added on the top of stack and its type is <paramref name="elementType"/> compatible.
            </param>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitNewarr(System.Action{MsgPack.Serialization.Reflection.TracingILGenerator},System.Action{MsgPack.Serialization.Reflection.TracingILGenerator},System.Type,System.Action{MsgPack.Serialization.Reflection.TracingILGenerator}[])">
            <summary>
            	Emit array initialization code with initializer.
            	Post condition is evaluation stack will no be modified as previous state. 
            	Note that initialized array is not placed on the top of evaluation stack.
            </summary>
            <param name="arrayLoadingEmitter">
            	Delegate to emittion of array loading instruction. 
            	1st argument is this instance.
            	Post condition is that exactly one target array will be added on the top of stack and element type is <paramref name="elementType"/>.
            </param>
            <param name="arrayStoringEmitter">
            	Delegate to emittion of array storing instruction. 
            	1st argument is this instance.
            	Pre condition is that the top of evaluation stack is array type and its element type is <paramref name="elementType"/>.
            	Post condition is that exactly one target array will be removed from the top of stack.
            </param>
            <param name="elementType"><see cref="T:System.Type"/> of array element. This can be generaic parameter.</param>
            <param name="elementLoadingEmitters">
            	List of delegates to emittion of storing element loading instruction. 
            	Index of this array corresponds to index of initializing array.
            	1st argument is this instance.
            	Post condition is that exactly one storing element will be added on the top of stack and its type is <paramref name="elementType"/> compatible.
            </param>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitAnyLdelem(System.Type,System.Action{MsgPack.Serialization.Reflection.TracingILGenerator},System.Int64)">
            <summary>
            	Emit array element loading instructions. 
            	Post condition is that exactly one loaded element will be placed on the top of stack and its element type is <paramref name="elementType"/>.
            </summary>
            <param name="elementType"><see cref="T:System.Type"/> of array element. This can be generaic parameter.</param>
            <param name="arrayLoadingEmitter">
            	Delegate to emittion of array loading instruction. 
            	1st argument is this instance.
            	Post condition is that exactly one target array will be added on the top of stack and its element type is <paramref name="elementType"/>.
            </param>
            <param name="index">Index of array element.</param>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitAnyStelem(System.Type,System.Action{MsgPack.Serialization.Reflection.TracingILGenerator},System.Int64,System.Action{MsgPack.Serialization.Reflection.TracingILGenerator})">
            <summary>
            	Emit array element storing instructions.
            	Post condition is evaluation stack will no be modified as previous state.
            </summary>
            <param name="elementType"><see cref="T:System.Type"/> of array element. This can be generaic parameter.</param>
            <param name="arrayLoadingEmitter">
            	Delegate to emittion of array loading instruction. 
            	1st argument is this instance.
            	Post condition is that exactly one target array will be added on the top of stack and its element type is <paramref name="elementType"/>.
            </param>
            <param name="index">Index of array element.</param>
            <param name="elementLoadingEmitter">
            	Delegate to emittion of storing element loading instruction. 
            	1st argument is this instance.
            	Post condition is that exactly one storing element will be added on the top of stack and its type is <paramref name="elementType"/> compatible.
            </param>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitLiteralInteger(System.Int64)">
            <summary>
            	Emit efficient integer constant loading.
            	Post condition is that exactly one integer will be added on the top of stack.
            </summary>
            <param name="value">Integer value.</param>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitTypeOf(System.Type)">
            <summary>
            	Emit 'typeof' expression.
            	Post condition is <see cref="T:System.Type"/> instance for <paramref name="type"/> will be placed on the top of evaluation stack.
            </summary>
            <param name="type">Target <see cref="T:System.Type"/>.</param>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitThrowNewArgumentExceptionWithInnerException">
            <summary>
            	Emit 'throw new ArgumentException(String,String,Exception)' statement.
            	Pre condition is that there are exactly three entries in the evaluation stack,
            	which are string, string, and Exception instance.
            	Post condition is that the evaluation statck will be empty.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitThrowNewExceptionWithInnerException(System.Type)">
            <summary>
            	Emit 'throw new TException(String,String,Exception)' statement.
            	Pre condition is that there are exactly two entries in the evaluation stack,
            	which are string and Exception instance.
            	Post condition is that the evaluation statck will be empty.
            </summary>
            <param name="exceptionType"><see cref="T:System.Type"/> of initializing and throwing <see cref="T:System.Exception"/>.</param>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.#ctor(System.Reflection.Emit.DynamicMethod,System.IO.TextWriter)">
            <summary>
            Initializes a new instance of the <see cref="T:MsgPack.Serialization.Reflection.TracingILGenerator"/> class.
            </summary>
            <param name="dynamicMethod">The dynamic method.</param>
            <param name="traceWriter">The trace writer.</param>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.Dispose">
            <summary>
            	Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitRet">
            <summary>
            	Emit 'ret' instruction with specified arguments.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.DeclareLocal(System.Type)">
            <summary>
            	Declare local without pinning and name for debugging.
            </summary>
            <param name="localType"><see cref="T:System.Type"/> of local variable.</param>
            <returns><see cref="T:System.Reflection.Emit.LocalBuilder"/> to refer declared local variable.</returns>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.DeclareLocal(System.Type,System.Boolean)">
            <summary>
            	Declare local without name for debugging.
            </summary>
            <param name="localType"><see cref="T:System.Type"/> of local variable.</param>
            <param name="pinned">If <c>true</c>, the local variable will be pinned.</param>
            <returns><see cref="T:System.Reflection.Emit.LocalBuilder"/> to refer declared local variable.</returns>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.DeclareLocal(System.Type,System.String)">
            <summary>
            	Declare local with name for debugging and without pinning.
            	Note that this method is not enabled for dynamic method.
            </summary>
            <param name="localType"><see cref="T:System.Type"/> of local variable.</param>
            <param name="name">Name of the local variable.</param>
            <returns><see cref="T:System.Reflection.Emit.LocalBuilder"/> to refer declared local variable.</returns>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.DeclareLocal(System.Type,System.String,System.Boolean)">
            <summary>
            	Declare local with name for debugging.
            	Note that this method is not enabled for dynamic method.
            </summary>
            <param name="localType"><see cref="T:System.Type"/> of local variable.</param>
            <param name="name">Name of the local variable.</param>
            <param name="pinned">If <c>true</c>, the local variable will be pinned.</param>
            <returns><see cref="T:System.Reflection.Emit.LocalBuilder"/> to refer declared local variable.</returns>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitExceptionBlock(System.Action{MsgPack.Serialization.Reflection.TracingILGenerator,System.Reflection.Emit.Label},System.Tuple{System.Type,System.Action{MsgPack.Serialization.Reflection.TracingILGenerator,System.Reflection.Emit.Label,System.Type}},System.Tuple{System.Type,System.Action{MsgPack.Serialization.Reflection.TracingILGenerator,System.Reflection.Emit.Label,System.Type}}[])">
            <summary>
            	Emit exception block with catch blocks.
            </summary>
            <param name="tryBlockEmitter">
            	<see cref="T:System.Action`2"/> which emits exception block (try in C#) body.
            	A 1st argument is this <see cref="T:MsgPack.Serialization.Reflection.TracingILGenerator"/>,
            	and a 2nd argument is <see cref="T:System.Reflection.Emit.Label"/> will to be end of emitting exception block.
            	The delegate do not have to emit leave or leave.s instrauction at tail of the body.
            </param>
            <param name="firstCatchBlock">
            	<see cref="T:System.Tuple`2"/> for catch block body emittion.
            	A 1st item of the tuple is <see cref="T:System.Type"/> which indicates catching exception type.
            	A 2nd item of the tuple is <see cref="T:System.Action`2"/> which emits catch block body.
            	A 1st argument of the delegate is this <see cref="T:MsgPack.Serialization.Reflection.TracingILGenerator"/>,
            	a 2nd argument of the delegate is <see cref="T:System.Reflection.Emit.Label"/> will to be end of emitting exception block,
            	and 3rd argument of the delegate is the 1st item of the tuple.
            	The delegate do not have to emit leave or leave.s instrauction at tail of the body.
            </param>
            <param name="remainingCatchBlockEmitters">
            	<see cref="T:System.Tuple`2"/> for catch block body emittion.
            	A 1st item of the tuple is <see cref="T:System.Type"/> which indicates catching exception type.
            	A 2nd item of the tuple is <see cref="T:System.Action`2"/> which emits catch block body.
            	A 1st argument of the delegate is this <see cref="T:MsgPack.Serialization.Reflection.TracingILGenerator"/>,
            	a 2nd argument of the delegate is <see cref="T:System.Reflection.Emit.Label"/> will to be end of emitting exception block,
            	and 3rd argument of the delegate is the 1st item of the tuple.
            	The delegate do not have to emit leave or leave.s instrauction at tail of the body.
            </param>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitExceptionBlock(System.Action{MsgPack.Serialization.Reflection.TracingILGenerator,System.Reflection.Emit.Label},System.Action{MsgPack.Serialization.Reflection.TracingILGenerator,System.Reflection.Emit.Label},System.Tuple{System.Type,System.Action{MsgPack.Serialization.Reflection.TracingILGenerator,System.Reflection.Emit.Label,System.Type}}[])">
            <summary>
            	Emit exception block with catch blocks and a finally block.
            </summary>
            <param name="tryBlockEmitter">
            	<see cref="T:System.Action`2"/> which emits exception block (try in C#) body.
            	A 1st argument is this <see cref="T:MsgPack.Serialization.Reflection.TracingILGenerator"/>,
            	and a 2nd argument is <see cref="T:System.Reflection.Emit.Label"/> will to be end of emitting exception block.
            	The delegate do not have to emit leave or leave.s instrauction at tail of the body.
            </param>
            <param name="finallyBlockEmitter">
            	<see cref="T:System.Action`2"/> which emits finally block  body.
            	A 1st argument is this <see cref="T:MsgPack.Serialization.Reflection.TracingILGenerator"/>,
            	and a 2nd argument is <see cref="T:System.Reflection.Emit.Label"/> will to be end of emitting exception block.
            	The delegate do not have to emit endfinally instrauction at tail of the body.
            </param>
            <param name="catchBlockEmitters">
            	<see cref="T:System.Tuple`2"/> for catch block body emittion.
            	A 1st item of the tuple is <see cref="T:System.Type"/> which indicates catching exception type.
            	A 2nd item of the tuple is <see cref="T:System.Action`2"/> which emits catch block body.
            	A 1st argument of the delegate is this <see cref="T:MsgPack.Serialization.Reflection.TracingILGenerator"/>,
            	a 2nd argument of the delegate is <see cref="T:System.Reflection.Emit.Label"/> will to be end of emitting exception block,
            	and 3rd argument of the delegate is the 1st item of the tuple.
            	The delegate do not have to emit leave or leave.s instrauction at tail of the body.
            </param>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.BeginExceptionBlock">
            <summary>
            	Begin exception block (try in C#) here.
            	Note that you do not have to emit leave or laeve.s instrauction at tail of the body.
            </summary>
            <returns><see cref="T:System.Reflection.Emit.Label"/> will to be end of begun exception block.</returns>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.BeginCatchBlock(System.Type)">
            <summary>
            	Begin catch block with specified exception.
            	Note that you do not have to emit leave or laeve.s instrauction at tail of the body.
            </summary>
            <param name="exceptionType"><see cref="T:System.Type"/> for catch.</param>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.BeginExceptFilterBlock">
            <summary>
            	Begin filter block.
            	Note that you do not have to emit leave or laeve.s instrauction at tail of the body.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.BeginFaultBlock">
            <summary>
            	Begin fault block.
            	Note that you do not have to emit endfinally instrauction at tail of the body.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.BeginFinallyBlock">
            <summary>
            	Begin finally block.
            	Note that you do not have to emit endfinally instrauction at tail of the body.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EndExceptionBlock">
            <summary>
            	End current exception block and its last clause.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.DefineLabel">
            <summary>
            	Define new <see cref="T:System.Reflection.Emit.Label"/> without name for tracing.
            </summary>
            <returns><see cref="T:System.Reflection.Emit.Label"/> which will be target of branch instructions.</returns>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.DefineLabel(System.String)">
            <summary>
            	Define new <see cref="T:System.Reflection.Emit.Label"/> with name for tracing.
            </summary>
            <param name="name">Name of label. Note that debugging information will not have this name.</param>
            <returns><see cref="T:System.Reflection.Emit.Label"/> which will be target of branch instructions.</returns>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.MarkLabel(System.Reflection.Emit.Label)">
            <summary>
            	Mark current position using specifieid <see cref="T:System.Reflection.Emit.Label"/>.
            </summary>
            <param name="label"><see cref="T:System.Reflection.Emit.Label"/>.</param>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitConstrainedCallvirt(System.Type,System.Reflection.MethodInfo)">
            <summary>
            	Emit constrained 'callvirt' instruction.
            </summary>
            <param name="constrainedTo"><see cref="T:System.Type"/> to be constrained to.</param>
            <param name="target">Target <see cref="T:System.Reflection.MethodInfo"/> which must be virtual method.</param>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitReadOnlyLdelema(System.Type)">
            <summary>
            	Emit readonly 'ldelema' instruction.
            </summary>
            <param name="elementType"><see cref="T:System.Type"/> of array element.</param>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitTailCall(System.Reflection.MethodInfo)">
            <summary>
            	Emit 'call' instruction with specified arguments as tail call.
            </summary>
            <param name="target"><see cref="T:System.Reflection.MethodInfo"/> as target.</param>
            <remarks>
            	Subsequent 'ret' instruction will be emitted together.
            </remarks>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitTailCallVirt(System.Reflection.MethodInfo)">
            <summary>
            	Emit 'callvirt' instruction with specified arguments as tail call.
            </summary>
            <param name="target"><see cref="T:System.Reflection.MethodInfo"/> as target.</param>
            <remarks>
            	Subsequent 'ret' instruction will be emitted together.
            </remarks>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitUnaligned(System.Byte)">
            <summary>
            	Emit 'unaligned.' prefix.
            </summary>
            <param name="alignment">Alignment.</param>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.TraceWrite(System.String)">
            <summary>
            	Write trace message.
            </summary>
            <param name="value">The string.</param>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.TraceWrite(System.String,System.Object)">
            <summary>
            	Write trace message.
            </summary>
            <param name="format">The format string.</param>
            <param name="arg0">Format argument.</param>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.TraceWrite(System.String,System.Object[])">
            <summary>
            	Write trace message.
            </summary>
            <param name="format">The format string.</param>
            <param name="args">Format arguments.</param>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.TraceWriteLine">
            <summary>
            	Write trace line break.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.TraceWriteLine(System.String)">
            <summary>
            	Write trace message followed by line break.
            </summary>
            <param name="value">The string.</param>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.TraceWriteLine(System.String,System.Object)">
            <summary>
            	Write trace message followed by line break.
            </summary>
            <param name="format">The format string.</param>
            <param name="arg0">Format argument.</param>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.TraceWriteLine(System.String,System.Object[])">
            <summary>
            	Write trace message followed by line break.
            </summary>
            <param name="format">The format string.</param>
            <param name="args">Format arguments.</param>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitNop">
            <summary>
            	Emit 'nop' instruction with specified arguments.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitBreak">
            <summary>
            	Emit 'break' instruction with specified arguments.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitLdarg_0">
            <summary>
            	Emit 'ldarg.0' instruction with specified arguments.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitLdarg_1">
            <summary>
            	Emit 'ldarg.1' instruction with specified arguments.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitLdarg_2">
            <summary>
            	Emit 'ldarg.2' instruction with specified arguments.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitLdarg_3">
            <summary>
            	Emit 'ldarg.3' instruction with specified arguments.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitLdloc_0">
            <summary>
            	Emit 'ldloc.0' instruction with specified arguments.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitLdloc_1">
            <summary>
            	Emit 'ldloc.1' instruction with specified arguments.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitLdloc_2">
            <summary>
            	Emit 'ldloc.2' instruction with specified arguments.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitLdloc_3">
            <summary>
            	Emit 'ldloc.3' instruction with specified arguments.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitStloc_0">
            <summary>
            	Emit 'stloc.0' instruction with specified arguments.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitStloc_1">
            <summary>
            	Emit 'stloc.1' instruction with specified arguments.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitStloc_2">
            <summary>
            	Emit 'stloc.2' instruction with specified arguments.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitStloc_3">
            <summary>
            	Emit 'stloc.3' instruction with specified arguments.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitLdarg_S(System.Byte)">
            <summary>
            	Emit 'ldarg.s' instruction with specified arguments.
            </summary>
            <param name="value"><see cref="T:System.Byte"/> as value.</param>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitLdarga_S(System.Byte)">
            <summary>
            	Emit 'ldarga.s' instruction with specified arguments.
            </summary>
            <param name="value"><see cref="T:System.Byte"/> as value.</param>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitStarg_S(System.Byte)">
            <summary>
            	Emit 'starg.s' instruction with specified arguments.
            </summary>
            <param name="value"><see cref="T:System.Byte"/> as value.</param>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitLdloc_S(System.Byte)">
            <summary>
            	Emit 'ldloc.s' instruction with specified arguments.
            </summary>
            <param name="value"><see cref="T:System.Byte"/> as value.</param>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitLdloca_S(System.Byte)">
            <summary>
            	Emit 'ldloca.s' instruction with specified arguments.
            </summary>
            <param name="value"><see cref="T:System.Byte"/> as value.</param>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitStloc_S(System.Byte)">
            <summary>
            	Emit 'stloc.s' instruction with specified arguments.
            </summary>
            <param name="value"><see cref="T:System.Byte"/> as value.</param>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitLdnull">
            <summary>
            	Emit 'ldnull' instruction with specified arguments.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitLdc_I4_M1">
            <summary>
            	Emit 'ldc.i4.m1' instruction with specified arguments.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitLdc_I4_0">
            <summary>
            	Emit 'ldc.i4.0' instruction with specified arguments.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitLdc_I4_1">
            <summary>
            	Emit 'ldc.i4.1' instruction with specified arguments.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitLdc_I4_2">
            <summary>
            	Emit 'ldc.i4.2' instruction with specified arguments.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitLdc_I4_3">
            <summary>
            	Emit 'ldc.i4.3' instruction with specified arguments.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitLdc_I4_4">
            <summary>
            	Emit 'ldc.i4.4' instruction with specified arguments.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitLdc_I4_5">
            <summary>
            	Emit 'ldc.i4.5' instruction with specified arguments.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitLdc_I4_6">
            <summary>
            	Emit 'ldc.i4.6' instruction with specified arguments.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitLdc_I4_7">
            <summary>
            	Emit 'ldc.i4.7' instruction with specified arguments.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitLdc_I4_8">
            <summary>
            	Emit 'ldc.i4.8' instruction with specified arguments.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitLdc_I4_S(System.Byte)">
            <summary>
            	Emit 'ldc.i4.s' instruction with specified arguments.
            </summary>
            <param name="value"><see cref="T:System.Byte"/> as value.</param>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitLdc_I4(System.Int32)">
            <summary>
            	Emit 'ldc.i4' instruction with specified arguments.
            </summary>
            <param name="value"><see cref="T:System.Int32"/> as value.</param>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitLdc_I8(System.Int64)">
            <summary>
            	Emit 'ldc.i8' instruction with specified arguments.
            </summary>
            <param name="value"><see cref="T:System.Int64"/> as value.</param>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitLdc_R4(System.Byte)">
            <summary>
            	Emit 'ldc.r4' instruction with specified arguments.
            </summary>
            <param name="value"><see cref="T:System.Byte"/> as value.</param>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitLdc_R8(System.Double)">
            <summary>
            	Emit 'ldc.r8' instruction with specified arguments.
            </summary>
            <param name="value"><see cref="T:System.Double"/> as value.</param>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitDup">
            <summary>
            	Emit 'dup' instruction with specified arguments.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitPop">
            <summary>
            	Emit 'pop' instruction with specified arguments.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitJmp(System.Reflection.MethodInfo)">
            <summary>
            	Emit 'jmp' instruction with specified arguments.
            </summary>
            <param name="target"><see cref="T:System.Reflection.MethodInfo"/> as target.</param>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitCall(System.Reflection.MethodInfo)">
            <summary>
            	Emit 'call' instruction with specified arguments.
            </summary>
            <param name="target"><see cref="T:System.Reflection.MethodInfo"/> as target.</param>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitBr_S(System.Reflection.Emit.Label)">
            <summary>
            	Emit 'br.s' instruction with specified arguments.
            </summary>
            <param name="target"><see cref="T:System.Reflection.Emit.Label"/> as target.</param>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitBrfalse_S(System.Reflection.Emit.Label)">
            <summary>
            	Emit 'brfalse.s' instruction with specified arguments.
            </summary>
            <param name="target"><see cref="T:System.Reflection.Emit.Label"/> as target.</param>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitBrtrue_S(System.Reflection.Emit.Label)">
            <summary>
            	Emit 'brtrue.s' instruction with specified arguments.
            </summary>
            <param name="target"><see cref="T:System.Reflection.Emit.Label"/> as target.</param>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitBeq_S(System.Reflection.Emit.Label)">
            <summary>
            	Emit 'beq.s' instruction with specified arguments.
            </summary>
            <param name="target"><see cref="T:System.Reflection.Emit.Label"/> as target.</param>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitBge_S(System.Reflection.Emit.Label)">
            <summary>
            	Emit 'bge.s' instruction with specified arguments.
            </summary>
            <param name="target"><see cref="T:System.Reflection.Emit.Label"/> as target.</param>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitBgt_S(System.Reflection.Emit.Label)">
            <summary>
            	Emit 'bgt.s' instruction with specified arguments.
            </summary>
            <param name="target"><see cref="T:System.Reflection.Emit.Label"/> as target.</param>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitBle_S(System.Reflection.Emit.Label)">
            <summary>
            	Emit 'ble.s' instruction with specified arguments.
            </summary>
            <param name="target"><see cref="T:System.Reflection.Emit.Label"/> as target.</param>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitBlt_S(System.Reflection.Emit.Label)">
            <summary>
            	Emit 'blt.s' instruction with specified arguments.
            </summary>
            <param name="target"><see cref="T:System.Reflection.Emit.Label"/> as target.</param>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitBne_Un_S(System.Reflection.Emit.Label)">
            <summary>
            	Emit 'bne.un.s' instruction with specified arguments.
            </summary>
            <param name="target"><see cref="T:System.Reflection.Emit.Label"/> as target.</param>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitBge_Un_S(System.Reflection.Emit.Label)">
            <summary>
            	Emit 'bge.un.s' instruction with specified arguments.
            </summary>
            <param name="target"><see cref="T:System.Reflection.Emit.Label"/> as target.</param>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitBgt_Un_S(System.Reflection.Emit.Label)">
            <summary>
            	Emit 'bgt.un.s' instruction with specified arguments.
            </summary>
            <param name="target"><see cref="T:System.Reflection.Emit.Label"/> as target.</param>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitBle_Un_S(System.Reflection.Emit.Label)">
            <summary>
            	Emit 'ble.un.s' instruction with specified arguments.
            </summary>
            <param name="target"><see cref="T:System.Reflection.Emit.Label"/> as target.</param>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitBlt_Un_S(System.Reflection.Emit.Label)">
            <summary>
            	Emit 'blt.un.s' instruction with specified arguments.
            </summary>
            <param name="target"><see cref="T:System.Reflection.Emit.Label"/> as target.</param>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitBr(System.Reflection.Emit.Label)">
            <summary>
            	Emit 'br' instruction with specified arguments.
            </summary>
            <param name="target"><see cref="T:System.Reflection.Emit.Label"/> as target.</param>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitBrfalse(System.Reflection.Emit.Label)">
            <summary>
            	Emit 'brfalse' instruction with specified arguments.
            </summary>
            <param name="target"><see cref="T:System.Reflection.Emit.Label"/> as target.</param>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitBrtrue(System.Reflection.Emit.Label)">
            <summary>
            	Emit 'brtrue' instruction with specified arguments.
            </summary>
            <param name="target"><see cref="T:System.Reflection.Emit.Label"/> as target.</param>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitBeq(System.Reflection.Emit.Label)">
            <summary>
            	Emit 'beq' instruction with specified arguments.
            </summary>
            <param name="target"><see cref="T:System.Reflection.Emit.Label"/> as target.</param>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitBge(System.Reflection.Emit.Label)">
            <summary>
            	Emit 'bge' instruction with specified arguments.
            </summary>
            <param name="target"><see cref="T:System.Reflection.Emit.Label"/> as target.</param>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitBgt(System.Reflection.Emit.Label)">
            <summary>
            	Emit 'bgt' instruction with specified arguments.
            </summary>
            <param name="target"><see cref="T:System.Reflection.Emit.Label"/> as target.</param>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitBle(System.Reflection.Emit.Label)">
            <summary>
            	Emit 'ble' instruction with specified arguments.
            </summary>
            <param name="target"><see cref="T:System.Reflection.Emit.Label"/> as target.</param>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitBlt(System.Reflection.Emit.Label)">
            <summary>
            	Emit 'blt' instruction with specified arguments.
            </summary>
            <param name="target"><see cref="T:System.Reflection.Emit.Label"/> as target.</param>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitBne_Un(System.Reflection.Emit.Label)">
            <summary>
            	Emit 'bne.un' instruction with specified arguments.
            </summary>
            <param name="target"><see cref="T:System.Reflection.Emit.Label"/> as target.</param>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitBge_Un(System.Reflection.Emit.Label)">
            <summary>
            	Emit 'bge.un' instruction with specified arguments.
            </summary>
            <param name="target"><see cref="T:System.Reflection.Emit.Label"/> as target.</param>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitBgt_Un(System.Reflection.Emit.Label)">
            <summary>
            	Emit 'bgt.un' instruction with specified arguments.
            </summary>
            <param name="target"><see cref="T:System.Reflection.Emit.Label"/> as target.</param>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitBle_Un(System.Reflection.Emit.Label)">
            <summary>
            	Emit 'ble.un' instruction with specified arguments.
            </summary>
            <param name="target"><see cref="T:System.Reflection.Emit.Label"/> as target.</param>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitBlt_Un(System.Reflection.Emit.Label)">
            <summary>
            	Emit 'blt.un' instruction with specified arguments.
            </summary>
            <param name="target"><see cref="T:System.Reflection.Emit.Label"/> as target.</param>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitSwitch(System.Reflection.Emit.Label[])">
            <summary>
            	Emit 'switch' instruction with specified arguments.
            </summary>
            <param name="targets"><see cref="T:System.Reflection.Emit.Label"/>[] as targets.</param>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitLdind_I1">
            <summary>
            	Emit 'ldind.i1' instruction with specified arguments.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitLdind_U1">
            <summary>
            	Emit 'ldind.u1' instruction with specified arguments.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitLdind_I2">
            <summary>
            	Emit 'ldind.i2' instruction with specified arguments.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitLdind_U2">
            <summary>
            	Emit 'ldind.u2' instruction with specified arguments.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitLdind_I4">
            <summary>
            	Emit 'ldind.i4' instruction with specified arguments.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitLdind_U4">
            <summary>
            	Emit 'ldind.u4' instruction with specified arguments.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitLdind_I8">
            <summary>
            	Emit 'ldind.i8' instruction with specified arguments.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitLdind_I">
            <summary>
            	Emit 'ldind.i' instruction with specified arguments.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitLdind_R4">
            <summary>
            	Emit 'ldind.r4' instruction with specified arguments.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitLdind_R8">
            <summary>
            	Emit 'ldind.r8' instruction with specified arguments.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitLdind_Ref">
            <summary>
            	Emit 'ldind.ref' instruction with specified arguments.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitStind_Ref">
            <summary>
            	Emit 'stind.ref' instruction with specified arguments.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitStind_I1">
            <summary>
            	Emit 'stind.i1' instruction with specified arguments.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitStind_I2">
            <summary>
            	Emit 'stind.i2' instruction with specified arguments.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitStind_I4">
            <summary>
            	Emit 'stind.i4' instruction with specified arguments.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitStind_I8">
            <summary>
            	Emit 'stind.i8' instruction with specified arguments.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitStind_R4">
            <summary>
            	Emit 'stind.r4' instruction with specified arguments.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitStind_R8">
            <summary>
            	Emit 'stind.r8' instruction with specified arguments.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitAdd">
            <summary>
            	Emit 'add' instruction with specified arguments.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitSub">
            <summary>
            	Emit 'sub' instruction with specified arguments.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitMul">
            <summary>
            	Emit 'mul' instruction with specified arguments.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitDiv">
            <summary>
            	Emit 'div' instruction with specified arguments.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitDiv_Un">
            <summary>
            	Emit 'div.un' instruction with specified arguments.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitRem">
            <summary>
            	Emit 'rem' instruction with specified arguments.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitRem_Un">
            <summary>
            	Emit 'rem.un' instruction with specified arguments.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitAnd">
            <summary>
            	Emit 'and' instruction with specified arguments.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitOr">
            <summary>
            	Emit 'or' instruction with specified arguments.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitXor">
            <summary>
            	Emit 'xor' instruction with specified arguments.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitShl">
            <summary>
            	Emit 'shl' instruction with specified arguments.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitShr">
            <summary>
            	Emit 'shr' instruction with specified arguments.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitShr_Un">
            <summary>
            	Emit 'shr.un' instruction with specified arguments.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitNeg">
            <summary>
            	Emit 'neg' instruction with specified arguments.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitNot">
            <summary>
            	Emit 'not' instruction with specified arguments.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitConv_I1">
            <summary>
            	Emit 'conv.i1' instruction with specified arguments.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitConv_I2">
            <summary>
            	Emit 'conv.i2' instruction with specified arguments.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitConv_I4">
            <summary>
            	Emit 'conv.i4' instruction with specified arguments.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitConv_I8">
            <summary>
            	Emit 'conv.i8' instruction with specified arguments.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitConv_R4">
            <summary>
            	Emit 'conv.r4' instruction with specified arguments.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitConv_R8">
            <summary>
            	Emit 'conv.r8' instruction with specified arguments.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitConv_U4">
            <summary>
            	Emit 'conv.u4' instruction with specified arguments.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitConv_U8">
            <summary>
            	Emit 'conv.u8' instruction with specified arguments.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitCallvirt(System.Reflection.MethodInfo)">
            <summary>
            	Emit 'callvirt' instruction with specified arguments.
            </summary>
            <param name="target"><see cref="T:System.Reflection.MethodInfo"/> as target.</param>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitCpobj(System.Type)">
            <summary>
            	Emit 'cpobj' instruction with specified arguments.
            </summary>
            <param name="type"><see cref="T:System.Type"/> as type.</param>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitLdobj(System.Type)">
            <summary>
            	Emit 'ldobj' instruction with specified arguments.
            </summary>
            <param name="type"><see cref="T:System.Type"/> as type.</param>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitLdstr(System.String)">
            <summary>
            	Emit 'ldstr' instruction with specified arguments.
            </summary>
            <param name="value"><see cref="T:System.String"/> as value.</param>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitNewobj(System.Reflection.ConstructorInfo)">
            <summary>
            	Emit 'newobj' instruction with specified arguments.
            </summary>
            <param name="constructor"><see cref="T:System.Reflection.ConstructorInfo"/> as constructor.</param>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitCastclass(System.Type)">
            <summary>
            	Emit 'castclass' instruction with specified arguments.
            </summary>
            <param name="type"><see cref="T:System.Type"/> as type.</param>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitIsinst(System.Type)">
            <summary>
            	Emit 'isinst' instruction with specified arguments.
            </summary>
            <param name="type"><see cref="T:System.Type"/> as type.</param>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitConv_R_Un">
            <summary>
            	Emit 'conv.r.un' instruction with specified arguments.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitUnbox(System.Type)">
            <summary>
            	Emit 'unbox' instruction with specified arguments.
            </summary>
            <param name="type"><see cref="T:System.Type"/> as type.</param>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitThrow">
            <summary>
            	Emit 'throw' instruction with specified arguments.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitLdfld(System.Reflection.FieldInfo)">
            <summary>
            	Emit 'ldfld' instruction with specified arguments.
            </summary>
            <param name="field"><see cref="T:System.Reflection.FieldInfo"/> as field.</param>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitLdflda(System.Reflection.FieldInfo)">
            <summary>
            	Emit 'ldflda' instruction with specified arguments.
            </summary>
            <param name="field"><see cref="T:System.Reflection.FieldInfo"/> as field.</param>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitStfld(System.Reflection.FieldInfo)">
            <summary>
            	Emit 'stfld' instruction with specified arguments.
            </summary>
            <param name="field"><see cref="T:System.Reflection.FieldInfo"/> as field.</param>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitLdsfld(System.Reflection.FieldInfo)">
            <summary>
            	Emit 'ldsfld' instruction with specified arguments.
            </summary>
            <param name="field"><see cref="T:System.Reflection.FieldInfo"/> as field.</param>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitLdsflda(System.Reflection.FieldInfo)">
            <summary>
            	Emit 'ldsflda' instruction with specified arguments.
            </summary>
            <param name="field"><see cref="T:System.Reflection.FieldInfo"/> as field.</param>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitStsfld(System.Reflection.FieldInfo)">
            <summary>
            	Emit 'stsfld' instruction with specified arguments.
            </summary>
            <param name="field"><see cref="T:System.Reflection.FieldInfo"/> as field.</param>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitStobj(System.Type)">
            <summary>
            	Emit 'stobj' instruction with specified arguments.
            </summary>
            <param name="type"><see cref="T:System.Type"/> as type.</param>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitConv_Ovf_I1_Un">
            <summary>
            	Emit 'conv.ovf.i1.un' instruction with specified arguments.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitConv_Ovf_I2_Un">
            <summary>
            	Emit 'conv.ovf.i2.un' instruction with specified arguments.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitConv_Ovf_I4_Un">
            <summary>
            	Emit 'conv.ovf.i4.un' instruction with specified arguments.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitConv_Ovf_I8_Un">
            <summary>
            	Emit 'conv.ovf.i8.un' instruction with specified arguments.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitConv_Ovf_U1_Un">
            <summary>
            	Emit 'conv.ovf.u1.un' instruction with specified arguments.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitConv_Ovf_U2_Un">
            <summary>
            	Emit 'conv.ovf.u2.un' instruction with specified arguments.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitConv_Ovf_U4_Un">
            <summary>
            	Emit 'conv.ovf.u4.un' instruction with specified arguments.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitConv_Ovf_U8_Un">
            <summary>
            	Emit 'conv.ovf.u8.un' instruction with specified arguments.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitConv_Ovf_I_Un">
            <summary>
            	Emit 'conv.ovf.i.un' instruction with specified arguments.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitConv_Ovf_U_Un">
            <summary>
            	Emit 'conv.ovf.u.un' instruction with specified arguments.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitBox(System.Type)">
            <summary>
            	Emit 'box' instruction with specified arguments.
            </summary>
            <param name="type"><see cref="T:System.Type"/> as type.</param>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitNewarr(System.Type)">
            <summary>
            	Emit 'newarr' instruction with specified arguments.
            </summary>
            <param name="type"><see cref="T:System.Type"/> as type.</param>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitLdlen">
            <summary>
            	Emit 'ldlen' instruction with specified arguments.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitLdelema(System.Type)">
            <summary>
            	Emit 'ldelema' instruction with specified arguments.
            </summary>
            <param name="type"><see cref="T:System.Type"/> as type.</param>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitLdelem_I1">
            <summary>
            	Emit 'ldelem.i1' instruction with specified arguments.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitLdelem_U1">
            <summary>
            	Emit 'ldelem.u1' instruction with specified arguments.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitLdelem_I2">
            <summary>
            	Emit 'ldelem.i2' instruction with specified arguments.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitLdelem_U2">
            <summary>
            	Emit 'ldelem.u2' instruction with specified arguments.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitLdelem_I4">
            <summary>
            	Emit 'ldelem.i4' instruction with specified arguments.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitLdelem_U4">
            <summary>
            	Emit 'ldelem.u4' instruction with specified arguments.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitLdelem_I8">
            <summary>
            	Emit 'ldelem.i8' instruction with specified arguments.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitLdelem_I">
            <summary>
            	Emit 'ldelem.i' instruction with specified arguments.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitLdelem_R4">
            <summary>
            	Emit 'ldelem.r4' instruction with specified arguments.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitLdelem_R8">
            <summary>
            	Emit 'ldelem.r8' instruction with specified arguments.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitLdelem_Ref">
            <summary>
            	Emit 'ldelem.ref' instruction with specified arguments.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitStelem_I">
            <summary>
            	Emit 'stelem.i' instruction with specified arguments.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitStelem_I1">
            <summary>
            	Emit 'stelem.i1' instruction with specified arguments.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitStelem_I2">
            <summary>
            	Emit 'stelem.i2' instruction with specified arguments.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitStelem_I4">
            <summary>
            	Emit 'stelem.i4' instruction with specified arguments.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitStelem_I8">
            <summary>
            	Emit 'stelem.i8' instruction with specified arguments.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitStelem_R4">
            <summary>
            	Emit 'stelem.r4' instruction with specified arguments.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitStelem_R8">
            <summary>
            	Emit 'stelem.r8' instruction with specified arguments.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitStelem_Ref">
            <summary>
            	Emit 'stelem.ref' instruction with specified arguments.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitLdelem(System.Type)">
            <summary>
            	Emit 'ldelem' instruction with specified arguments.
            </summary>
            <param name="type"><see cref="T:System.Type"/> as type.</param>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitStelem(System.Type)">
            <summary>
            	Emit 'stelem' instruction with specified arguments.
            </summary>
            <param name="type"><see cref="T:System.Type"/> as type.</param>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitUnbox_Any(System.Type)">
            <summary>
            	Emit 'unbox.any' instruction with specified arguments.
            </summary>
            <param name="type"><see cref="T:System.Type"/> as type.</param>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitConv_Ovf_I1">
            <summary>
            	Emit 'conv.ovf.i1' instruction with specified arguments.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitConv_Ovf_U1">
            <summary>
            	Emit 'conv.ovf.u1' instruction with specified arguments.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitConv_Ovf_I2">
            <summary>
            	Emit 'conv.ovf.i2' instruction with specified arguments.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitConv_Ovf_U2">
            <summary>
            	Emit 'conv.ovf.u2' instruction with specified arguments.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitConv_Ovf_I4">
            <summary>
            	Emit 'conv.ovf.i4' instruction with specified arguments.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitConv_Ovf_U4">
            <summary>
            	Emit 'conv.ovf.u4' instruction with specified arguments.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitConv_Ovf_I8">
            <summary>
            	Emit 'conv.ovf.i8' instruction with specified arguments.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitConv_Ovf_U8">
            <summary>
            	Emit 'conv.ovf.u8' instruction with specified arguments.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitRefanyval(System.Type)">
            <summary>
            	Emit 'refanyval' instruction with specified arguments.
            </summary>
            <param name="type"><see cref="T:System.Type"/> as type.</param>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitCkfinite">
            <summary>
            	Emit 'ckfinite' instruction with specified arguments.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitMkrefany(System.Type)">
            <summary>
            	Emit 'mkrefany' instruction with specified arguments.
            </summary>
            <param name="type"><see cref="T:System.Type"/> as type.</param>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitLdtoken(System.Type)">
            <summary>
            	Emit 'ldtoken' instruction with specified arguments.
            </summary>
            <param name="target"><see cref="T:System.Type"/> as target.</param>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitLdtoken(System.Reflection.MethodInfo)">
            <summary>
            	Emit 'ldtoken' instruction with specified arguments.
            </summary>
            <param name="target"><see cref="T:System.Reflection.MethodInfo"/> as target.</param>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitLdtoken(System.Reflection.FieldInfo)">
            <summary>
            	Emit 'ldtoken' instruction with specified arguments.
            </summary>
            <param name="target"><see cref="T:System.Reflection.FieldInfo"/> as target.</param>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitConv_U2">
            <summary>
            	Emit 'conv.u2' instruction with specified arguments.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitConv_U1">
            <summary>
            	Emit 'conv.u1' instruction with specified arguments.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitConv_I">
            <summary>
            	Emit 'conv.i' instruction with specified arguments.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitConv_Ovf_I">
            <summary>
            	Emit 'conv.ovf.i' instruction with specified arguments.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitConv_Ovf_U">
            <summary>
            	Emit 'conv.ovf.u' instruction with specified arguments.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitAdd_Ovf">
            <summary>
            	Emit 'add.ovf' instruction with specified arguments.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitAdd_Ovf_Un">
            <summary>
            	Emit 'add.ovf.un' instruction with specified arguments.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitMul_Ovf">
            <summary>
            	Emit 'mul.ovf' instruction with specified arguments.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitMul_Ovf_Un">
            <summary>
            	Emit 'mul.ovf.un' instruction with specified arguments.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitSub_Ovf">
            <summary>
            	Emit 'sub.ovf' instruction with specified arguments.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitSub_Ovf_Un">
            <summary>
            	Emit 'sub.ovf.un' instruction with specified arguments.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitEndfinally">
            <summary>
            	Emit 'endfinally' instruction with specified arguments.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitLeave(System.Reflection.Emit.Label)">
            <summary>
            	Emit 'leave' instruction with specified arguments.
            </summary>
            <param name="target"><see cref="T:System.Reflection.Emit.Label"/> as target.</param>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitLeave_S(System.Reflection.Emit.Label)">
            <summary>
            	Emit 'leave.s' instruction with specified arguments.
            </summary>
            <param name="target"><see cref="T:System.Reflection.Emit.Label"/> as target.</param>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitStind_I">
            <summary>
            	Emit 'stind.i' instruction with specified arguments.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitConv_U">
            <summary>
            	Emit 'conv.u' instruction with specified arguments.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitArglist">
            <summary>
            	Emit 'arglist' instruction with specified arguments.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitCeq">
            <summary>
            	Emit 'ceq' instruction with specified arguments.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitCgt">
            <summary>
            	Emit 'cgt' instruction with specified arguments.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitCgt_Un">
            <summary>
            	Emit 'cgt.un' instruction with specified arguments.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitClt">
            <summary>
            	Emit 'clt' instruction with specified arguments.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitClt_Un">
            <summary>
            	Emit 'clt.un' instruction with specified arguments.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitLdftn(System.Reflection.MethodInfo)">
            <summary>
            	Emit 'ldftn' instruction with specified arguments.
            </summary>
            <param name="method"><see cref="T:System.Reflection.MethodInfo"/> as method.</param>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitLdvirtftn(System.Reflection.MethodInfo)">
            <summary>
            	Emit 'ldvirtftn' instruction with specified arguments.
            </summary>
            <param name="method"><see cref="T:System.Reflection.MethodInfo"/> as method.</param>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitLdarg(System.Int32)">
            <summary>
            	Emit 'ldarg' instruction with specified arguments.
            </summary>
            <param name="index"><see cref="T:System.Int32"/> as index.</param>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitLdarga(System.Int32)">
            <summary>
            	Emit 'ldarga' instruction with specified arguments.
            </summary>
            <param name="index"><see cref="T:System.Int32"/> as index.</param>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitStarg(System.Int32)">
            <summary>
            	Emit 'starg' instruction with specified arguments.
            </summary>
            <param name="index"><see cref="T:System.Int32"/> as index.</param>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitLdloc(System.Int32)">
            <summary>
            	Emit 'ldloc' instruction with specified arguments.
            </summary>
            <param name="index"><see cref="T:System.Int32"/> as index.</param>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitLdloca(System.Int32)">
            <summary>
            	Emit 'ldloca' instruction with specified arguments.
            </summary>
            <param name="index"><see cref="T:System.Int32"/> as index.</param>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitStloc(System.Int32)">
            <summary>
            	Emit 'stloc' instruction with specified arguments.
            </summary>
            <param name="index"><see cref="T:System.Int32"/> as index.</param>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitLocalloc">
            <summary>
            	Emit 'localloc' instruction with specified arguments.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitEndfilter">
            <summary>
            	Emit 'endfilter' instruction with specified arguments.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitInitobj(System.Type)">
            <summary>
            	Emit 'initobj' instruction with specified arguments.
            </summary>
            <param name="type"><see cref="T:System.Type"/> as type.</param>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitCpblk">
            <summary>
            	Emit 'cpblk' instruction with specified arguments.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitInitblk">
            <summary>
            	Emit 'initblk' instruction with specified arguments.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitRethrow">
            <summary>
            	Emit 'rethrow' instruction with specified arguments.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitSizeof(System.Type)">
            <summary>
            	Emit 'sizeof' instruction with specified arguments.
            </summary>
            <param name="type"><see cref="T:System.Type"/> as type.</param>
        </member>
        <member name="M:MsgPack.Serialization.Reflection.TracingILGenerator.EmitRefanytype">
            <summary>
            	Emit 'refanytype' instruction with specified arguments.
            </summary>
        </member>
        <member name="P:MsgPack.Serialization.Reflection.TracingILGenerator.EndOfMethod">
            <summary>
            	Get <see cref="T:System.Reflection.Emit.Label"/> for end of method.
            </summary>
            <value>
            	<see cref="T:System.Reflection.Emit.Label"/> for end of method.
            </value>
        </member>
        <member name="P:MsgPack.Serialization.Reflection.TracingILGenerator.EndOfCurrentExceptionBlock">
            <summary>
            	Get <see cref="T:System.Reflection.Emit.Label"/> for end of current exception blocks.
            </summary>
            <value>
            	<see cref="T:System.Reflection.Emit.Label"/> for end of current exception blocks.
            	When there are no exception blocks, then null.
            </value>
        </member>
        <member name="P:MsgPack.Serialization.Reflection.TracingILGenerator.IsInExceptionBlock">
            <summary>
            	Get whether there are any exception blocks in current positon.
            </summary>
            <value>
            	If there are any exception blocks in current positon then <c>true</c>; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MsgPack.Serialization.Reflection.TracingILGenerator.IsInDynamicMethod">
            <summary>
            	Get the value whether this instance used for dynamic method.
            </summary>
            <value>If  this instance used for dynamic method then <c>true</c>; otherwise <c>false</c>.</value>
            <remarks>
            	Dynamic method does not support debugging information like local variable name.
            </remarks>
        </member>
        <member name="P:MsgPack.Serialization.Reflection.TracingILGenerator.IndentLevel">
            <summary>
            	Get level of indentation.
            </summary>
        </member>
        <member name="P:MsgPack.Serialization.Reflection.TracingILGenerator.IndentCharacters">
            <summary>
            	Get or set indent characters.
            </summary>
            <value>
            	<see cref="T:System.String"/> to be used to indent.
            	To reset default, specify null.
            </value>
        </member>
        <member name="P:MsgPack.Serialization.Reflection.TracingILGenerator.LineNumber">
            <summary>
            	Get current line number.
            </summary>
            <value>Current line number.</value>
        </member>
        <member name="P:MsgPack.Serialization.Reflection.TracingILGenerator.IsEnded">
            <summary>
            	Get whether this IL stream is ended with 'ret'.
            </summary>
            <returns>
            	When this IL stream is ended with 'ret' then <c>true</c>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:MsgPack.Serialization.SerializationCompatibilityOptions">
            <summary>
            	Represents compatibility options of serialization runtime.
            </summary>
        </member>
        <member name="P:MsgPack.Serialization.SerializationCompatibilityOptions.OneBoundDataMemberOrder">
            <summary>
            	Gets or sets a value indicating whether <see cref="P:System.Runtime.Serialization.DataMemberAttribute.Order"/> should be started with 1 instead of 0.
            </summary>
            <value>
            	<c>true</c> if <see cref="P:System.Runtime.Serialization.DataMemberAttribute.Order"/> should be started with 1 instead of 0; otherwise, <c>false</c>.
            	Default is <c>false</c>.
            </value>
            <remarks>
            	Using this value, you can switch between MessagePack for CLI and ProtoBuf.NET seamlessly.
            </remarks>
        </member>
        <member name="T:MsgPack.Serialization.SerializationContext">
            <summary>
            	<strong>This is intened to MsgPack for CLI internal use. Do not use this type from application directly.</strong>
            	Represents serialization context information for internal serialization logic.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.SerializationContext.#ctor">
            <summary>
            	Initializes a new instance of the <see cref="T:MsgPack.Serialization.SerializationContext"/> class with copy of <see cref="P:MsgPack.Serialization.SerializerRepository.Default"/>.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.SerializationContext.GetSerializer``1">
            <summary>
            	Gets the <see cref="T:MsgPack.Serialization.MessagePackSerializer`1"/> with this instance.
            </summary>
            <typeparam name="T">Type of serialization/deserialization target.</typeparam>
            <returns>
            	<see cref="T:MsgPack.Serialization.MessagePackSerializer`1"/>.
            	If there is exiting one, returns it.
            	Else the new instance will be created.
            </returns>
            <remarks>
            	This method automatically register new instance via <see cref="M:SerializationRepository.Register{T}(MessagePackSerializer{T})"/>.
            </remarks>
        </member>
        <member name="M:MsgPack.Serialization.SerializationContext.GetSerializer(System.Type)">
            <summary>
            	Gets the serializer for the specified <see cref="T:System.Type"/>.
            </summary>
            <param name="targetType">Type of the serialization target.</param>
            <returns>
            	<see cref="T:MsgPack.Serialization.IMessagePackSingleObjectSerializer"/>.
            	If there is exiting one, returns it.
            	Else the new instance will be created.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="targetType"/> is <c>null</c>.
            </exception>
            <remarks>
            	Although <see cref="M:MsgPack.Serialization.SerializationContext.GetSerializer``1"/> is preferred,
            	this method can be used from non-generic type or methods.
            </remarks>
        </member>
        <member name="P:MsgPack.Serialization.SerializationContext.Default">
            <summary>
            	Gets or sets the default instance.
            </summary>
            <value>
            	The default <see cref="T:MsgPack.Serialization.SerializationContext"/> instance.
            </value>
            <exception cref="T:System.ArgumentNullException">The setting value is <c>null</c>.</exception>
        </member>
        <member name="P:MsgPack.Serialization.SerializationContext.Serializers">
            <summary>
            	Gets the current <see cref="T:MsgPack.Serialization.SerializerRepository"/>.
            </summary>
            <value>
            	The  current <see cref="T:MsgPack.Serialization.SerializerRepository"/>.
            </value>
        </member>
        <member name="P:MsgPack.Serialization.SerializationContext.EmitterFlavor">
            <summary>
            	Gets or sets the <see cref="P:MsgPack.Serialization.SerializationContext.EmitterFlavor"/>.
            </summary>
            <value>
            	The <see cref="P:MsgPack.Serialization.SerializationContext.EmitterFlavor"/>
            </value>
            <remarks>
            	For testing purposes.
            </remarks>
        </member>
        <member name="P:MsgPack.Serialization.SerializationContext.CompatibilityOptions">
            <summary>
            	Gets the compatibility options.
            </summary>
            <value>
            	The <see cref="T:MsgPack.Serialization.SerializationCompatibilityOptions"/> which stores compatibility options. This value will not be <c>null</c>.
            </value>
        </member>
        <member name="P:MsgPack.Serialization.SerializationContext.SerializationMethod">
            <summary>
            	Gets or sets the <see cref="P:MsgPack.Serialization.SerializationContext.SerializationMethod"/> to determine serialization strategy.
            </summary>
            <value>
            	The <see cref="P:MsgPack.Serialization.SerializationContext.SerializationMethod"/> to determine serialization strategy.
            </value>
        </member>
        <member name="P:MsgPack.Serialization.SerializationContext.GeneratorOption">
            <summary>
            	Gets or sets the <see cref="T:MsgPack.Serialization.SerializationMethodGeneratorOption"/> to control code generation.
            </summary>
            <value>
            	The <see cref="T:MsgPack.Serialization.SerializationMethodGeneratorOption"/>.
            </value>
        </member>
        <member name="T:MsgPack.Serialization.SerializationExceptions">
            <summary>
            	<strong>This is intended to MsgPack for CLI internal use. Do not use this type from application directly.</strong>
            	Defines common exception factory methods.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.SerializationExceptions.NewValueTypeCannotBeNull(System.String,System.Type,System.Type)">
            <summary>
            	<strong>This is intended to MsgPack for CLI internal use. Do not use this type from application directly.</strong>
            	Returns new exception to notify that value type cannot be <c>null</c> on deserialization.
            </summary>
            <param name="name">The name of the member.</param>
            <param name="memberType">The type of the member.</param>
            <param name="declaringType">The type that declares the member.</param>
            <returns><see cref="T:System.Exception"/> instance. It will not be <c>null</c>.</returns>
        </member>
        <member name="M:MsgPack.Serialization.SerializationExceptions.NewValueTypeCannotBeNull(System.Type)">
            <summary>
            	<strong>This is intended to MsgPack for CLI internal use. Do not use this type from application directly.</strong>
            	Returns new exception to notify that value type cannot be <c>null</c> on deserialization.
            </summary>
            <param name="type">The target type.</param>
            <returns><see cref="T:System.Exception"/> instance. It will not be <c>null</c>.</returns>
        </member>
        <member name="F:MsgPack.Serialization.SerializationExceptions.NewTypeCannotSerializeMethod">
            <summary>
            	<see cref="T:System.Reflection.MethodInfo"/> of <see cref="M:MsgPack.Serialization.SerializationExceptions.NewTypeCannotSerialize(System.Type)"/> method.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.SerializationExceptions.NewTypeCannotSerialize(System.Type)">
            <summary>
            	<strong>This is intended to MsgPack for CLI internal use. Do not use this type from application directly.</strong>
            	Returns new exception to notify that value type cannot serialize.
            </summary>
            <param name="type">The target type.</param>
            <returns><see cref="T:System.Exception"/> instance. It will not be <c>null</c>.</returns>
        </member>
        <member name="F:MsgPack.Serialization.SerializationExceptions.NewTypeCannotDeserializeMethod">
            <summary>
            	<see cref="T:System.Reflection.MethodInfo"/> of <see cref="M:MsgPack.Serialization.SerializationExceptions.NewTypeCannotDeserialize(System.Type)"/> method.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.SerializationExceptions.NewTypeCannotDeserialize(System.Type)">
            <summary>
            	<strong>This is intended to MsgPack for CLI internal use. Do not use this type from application directly.</strong>
            	Returns new exception to notify that value type cannot deserialize.
            </summary>
            <param name="type">The target type.</param>
            <returns><see cref="T:System.Exception"/> instance. It will not be <c>null</c>.</returns>
        </member>
        <member name="F:MsgPack.Serialization.SerializationExceptions.NewTypeCannotDeserialize3Method">
            <summary>
            	<see cref="T:System.Reflection.MethodInfo"/> of <see cref="M:MsgPack.Serialization.SerializationExceptions.NewTypeCannotDeserialize(System.Type,System.String,System.Exception)"/> method.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.SerializationExceptions.NewTypeCannotDeserialize(System.Type,System.String,System.Exception)">
            <summary>
            	<strong>This is intended to MsgPack for CLI internal use. Do not use this type from application directly.</strong>
            	Returns new exception to notify that value type cannot deserialize.
            </summary>
            <param name="type">The target type.</param>
            <param name="memberName">The name of deserializing member.</param>
            <param name="inner">The inner exception.</param>
            <returns><see cref="T:System.Exception"/> instance. It will not be <c>null</c>.</returns>
        </member>
        <member name="F:MsgPack.Serialization.SerializationExceptions.NewMissingItemMethod">
            <summary>
            	<see cref="T:System.Reflection.MethodInfo"/> of <see cref="M:MsgPack.Serialization.SerializationExceptions.NewMissingItem(System.Int32)"/> method.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.SerializationExceptions.NewMissingItem(System.Int32)">
            <summary>
            	<strong>This is intended to MsgPack for CLI internal use. Do not use this type from application directly.</strong>
            	Returns new exception to notify that item is not found on the unpacking stream.
            </summary>
            <param name="index">The index to be unpacking.</param>
            <returns><see cref="T:System.Exception"/> instance. It will not be <c>null</c>.</returns>
        </member>
        <member name="M:MsgPack.Serialization.SerializationExceptions.NewTargetDoesNotHavePublicDefaultConstructor(System.Type)">
            <summary>
            	<strong>This is intended to MsgPack for CLI internal use. Do not use this type from application directly.</strong>
            	Returns new exception to notify that target type is not serializable because it does not have public default constructor.
            </summary>
            <param name="type">The target type.</param>
            <returns><see cref="T:System.Exception"/> instance. It will not be <c>null</c>.</returns>
        </member>
        <member name="M:MsgPack.Serialization.SerializationExceptions.NewTargetDoesNotHavePublicDefaultConstructorNorInitialCapacity(System.Type)">
            <summary>
            	<strong>This is intended to MsgPack for CLI internal use. Do not use this type from application directly.</strong>
            	Returns new exception to notify that target type is not serializable because it does not have both of public default constructor and public constructor with an Int32 parameter.
            </summary>
            <param name="type">The target type.</param>
            <returns><see cref="T:System.Exception"/> instance. It will not be <c>null</c>.</returns>
        </member>
        <member name="M:MsgPack.Serialization.SerializationExceptions.NewNoSerializableFieldsException(System.Type)">
            <summary>
            	<strong>This is intended to MsgPack for CLI internal use. Do not use this type from application directly.</strong>
            	Returns new exception to notify that there are no serializable fields and properties on the target type.
            </summary>
            <param name="type">The target type.</param>
            <returns><see cref="T:System.Exception"/> instance. It will not be <c>null</c>.</returns>
        </member>
        <member name="F:MsgPack.Serialization.SerializationExceptions.NewMissingPropertyMethod">
            <summary>
            	<see cref="T:System.Reflection.MethodInfo"/> of <see cref="M:MsgPack.Serialization.SerializationExceptions.NewMissingProperty(System.String)"/> method.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.SerializationExceptions.NewMissingProperty(System.String)">
            <summary>
            	<strong>This is intended to MsgPack for CLI internal use. Do not use this type from application directly.</strong>
            	Returns new exception to notify that required field is not found on the unpacking stream.
            </summary>
            <param name="name">The name of the property.</param>
            <returns><see cref="T:System.Exception"/> instance. It will not be <c>null</c>.</returns>
        </member>
        <member name="F:MsgPack.Serialization.SerializationExceptions.NewUnexpectedEndOfStreamMethod">
            <summary>
            	<see cref="T:System.Reflection.MethodInfo"/> of <see cref="M:MsgPack.Serialization.SerializationExceptions.NewUnexpectedEndOfStream"/> method.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.SerializationExceptions.NewUnexpectedEndOfStream">
            <summary>
            	<strong>This is intended to MsgPack for CLI internal use. Do not use this type from application directly.</strong>
            	Returns new exception to notify that unpacking stream ends on unexpectedly position.
            </summary>
            <returns><see cref="T:System.Exception"/> instance. It will not be <c>null</c>.</returns>
        </member>
        <member name="M:MsgPack.Serialization.SerializationExceptions.NewMissingAddMethod(System.Type)">
            <summary>
            	<strong>This is intended to MsgPack for CLI internal use. Do not use this type from application directly.</strong>
            	Returns new exception to notify that target collection type does not declare appropriate Add(T) method.
            </summary>
            <param name="type">The target type.</param>
            <returns><see cref="T:System.Exception"/> instance. It will not be <c>null</c>.</returns>
        </member>
        <member name="M:MsgPack.Serialization.SerializationExceptions.NewIsNotArrayHeader">
            <summary>
            	<strong>This is intended to MsgPack for CLI internal use. Do not use this type from application directly.</strong>
            	Returns new exception to notify that unpacker is not in the array header, that is the state is invalid.
            </summary>
            <returns><see cref="T:System.Exception"/> instance. It will not be <c>null</c>.</returns>
        </member>
        <member name="M:MsgPack.Serialization.SerializationExceptions.NewIsNotMapHeader">
            <summary>
            	<strong>This is intended to MsgPack for CLI internal use. Do not use this type from application directly.</strong>
            	Returns new exception to notify that unpacker is not in the array header, that is the state is invalid.
            </summary>
            <returns><see cref="T:System.Exception"/> instance. It will not be <c>null</c>.</returns>
        </member>
        <member name="M:MsgPack.Serialization.SerializationExceptions.NewNotSupportedBecauseCannotInstanciateAbstractType(System.Type)">
            <summary>
            	<strong>This is intended to MsgPack for CLI internal use. Do not use this type from application directly.</strong>
            	Returns new exception to notify that operation is not supported because <paramref name="type"/> cannot be instanciated.
            </summary>
            <param name="type">Type.</param>
            <returns><see cref="T:System.Exception"/> instance. It will not be <c>null</c>.</returns>
        </member>
        <member name="M:MsgPack.Serialization.SerializationExceptions.NewTupleCardinarityIsNotMatch(System.Int32,System.Int32)">
            <summary>
            	<strong>This is intended to MsgPack for CLI internal use. Do not use this type from application directly.</strong>
            	Returns new exception to notify that the array length does not match to expected tuple cardinality.
            </summary>
            <param name="expectedTupleCardinality">The expected cardinality of the tuple.</param>
            <param name="actualArrayLength">The actual serialized array length.</param>
            <returns><see cref="T:System.Exception"/> instance. It will not be <c>null</c>.</returns>
        </member>
        <member name="M:MsgPack.Serialization.SerializationExceptions.NewIsIncorrectStream(System.Exception)">
            <summary>
            	<strong>This is intended to MsgPack for CLI internal use. Do not use this type from application directly.</strong>
            	Returns new exception to notify that the underlying stream is not correct semantically because failed to unpack items count of array/map.
            </summary>
            <param name="innerException">The inner exception for the debug. The value is implementation specific.</param>
            <returns><see cref="T:System.Exception"/> instance. It will not be <c>null</c>.</returns>
        </member>
        <member name="M:MsgPack.Serialization.SerializationExceptions.NewIsTooLargeCollection">
            <summary>
            	<strong>This is intended to MsgPack for CLI internal use. Do not use this type from application directly.</strong>
            	Returns new exception to notify that the unpacking collection is too large to represents in the current runtime environment.
            </summary>
            <returns><see cref="T:System.Exception"/> instance. It will not be <c>null</c>.</returns>
        </member>
        <member name="M:MsgPack.Serialization.SerializationExceptions.NewEmptyOrUnstartedUnpacker">
            <summary>
            	<strong>This is intended to MsgPack for CLI internal use. Do not use this type from application directly.</strong>
            	Returns new exception to notify that the the unpacker does not contain any data because the underlying stream is empty or unpacker has not been started.
            </summary>
            <returns><see cref="T:System.Exception"/> instance. It will not be <c>null</c>.</returns>
        </member>
        <member name="M:MsgPack.Serialization.SerializationExceptions.NewNullIsProhibited(System.String)">
            <summary>
            	<strong>This is intended to MsgPack for CLI internal use. Do not use this type from application directly.</strong>
            	Returns new exception to notify that the member cannot be <c>null</c> or the unpacking value cannot be nil because nil value is explicitly prohibitted.
            </summary>
            <param name="memberName">The name of the member.</param>
            <returns><see cref="T:System.Exception"/> instance. It will not be <c>null</c>.</returns>
        </member>
        <member name="M:MsgPack.Serialization.SerializationExceptions.NewReadOnlyMemberItemsMustNotBeNull(System.String)">
            <summary>
            	<strong>This is intended to MsgPack for CLI internal use. Do not use this type from application directly.</strong>
            	Returns new exception to notify that the unpacking value cannot be nil because the target member is read only and its type is collection.
            </summary>
            <param name="memberName">The name of the member.</param>
            <returns><see cref="T:System.Exception"/> instance. It will not be <c>null</c>.</returns>
        </member>
        <member name="M:MsgPack.Serialization.SerializationExceptions.NewStreamDoesNotContainCollectionForMember(System.String)">
            <summary>
            	<strong>This is intended to MsgPack for CLI internal use. Do not use this type from application directly.</strong>
            	Returns new exception to notify that the unpacking collection value is not a collection.
            </summary>
            <param name="memberName">The name of the member.</param>
            <returns><see cref="T:System.Exception"/> instance. It will not be <c>null</c>.</returns>
        </member>
        <member name="M:MsgPack.Serialization.SerializationExceptions.NewUnexpectedArrayLength(System.Int32,System.Int32)">
            <summary>
            	<strong>This is intended to MsgPack for CLI internal use. Do not use this type from application directly.</strong>
            	Returns new exception to notify that the unpacking array size is not expected length.
            </summary>
            <param name="expectedLength">Expected, required for deserialization array length.</param>
            <param name="actualLength">Actual array length.</param>
            <returns><see cref="T:System.Exception"/> instance. It will not be <c>null</c>.</returns>
        </member>
        <member name="F:MsgPack.Serialization.SerializationExceptions.NewFailedToDeserializeMemberMethod">
            <summary>
            	<see cref="T:System.Reflection.MethodInfo"/> of <see cref="M:MsgPack.Serialization.SerializationExceptions.NewFailedToDeserializeMember(System.Type,System.String,System.Exception)"/> method.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.SerializationExceptions.NewFailedToDeserializeMember(System.Type,System.String,System.Exception)">
            <summary>
            	<strong>This is intended to MsgPack for CLI internal use. Do not use this type from application directly.</strong>
            	Returns new exception to notify that it is failed to deserialize member.
            </summary>
            <param name="targetType">Deserializing type.</param>
            <param name="memberName">The name of the deserializing member.</param>
            <param name="inner">The exception which caused current error.</param>
            <returns><see cref="T:System.Exception"/> instance. It will not be <c>null</c>.</returns>
        </member>
        <member name="T:MsgPack.Serialization.SerializationMethod">
            <summary>
            	Represents serialization method for complex types.
            </summary>
        </member>
        <member name="F:MsgPack.Serialization.SerializationMethod.Array">
            <summary>
            	The object will be serialized as array which is ordered by member ID.
            	This is default and more interoperable option.
            </summary>
        </member>
        <member name="F:MsgPack.Serialization.SerializationMethod.Map">
            <summary>
            	The object will be serialized as map which is ordered by member ID.
            	This is a bit slower than array, but more stable for forward/backward compatibility.
            </summary>
        </member>
        <member name="T:MsgPack.Serialization.SerializationMethodGeneratorOption">
            <summary>
            	Define options of serializer generation.
            </summary>
        </member>
        <member name="F:MsgPack.Serialization.SerializationMethodGeneratorOption.Fast">
            <summary>
            	Prefer performance. This options is default.
            </summary>
        </member>
        <member name="T:MsgPack.Serialization.SerializerRepository">
            <summary>
            	Repository of known <see cref="T:MsgPack.Serialization.MessagePackSerializer`1"/>s.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.SerializerRepository.#ctor">
            <summary>
            Initializes a new empty instance of the <see cref="T:MsgPack.Serialization.SerializerRepository"/> class.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.SerializerRepository.#ctor(MsgPack.Serialization.SerializerRepository)">
            <summary>
            	Initializes a new instance of the <see cref="T:MsgPack.Serialization.SerializerRepository"/> class  which has copied serializers.
            </summary>
            <param name="copiedFrom">The repository which will be copied its contents.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="copiedFrom"/> is <c>null</c>.
            </exception>
        </member>
        <member name="M:MsgPack.Serialization.SerializerRepository.Dispose">
            <summary>
            	Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.SerializerRepository.Get``1(MsgPack.Serialization.SerializationContext)">
            <summary>
            	Gets the registered <see cref="T:MsgPack.Serialization.MessagePackSerializer`1"/> from this repository.
            </summary>
            <typeparam name="T">Type of the object to be marshaled/unmarshaled.</typeparam>
            <returns>
            	<see cref="T:MsgPack.Serialization.MessagePackSerializer`1"/>. If no appropriate mashalers has benn registered, then <c>null</c>.
            </returns>
        </member>
        <member name="M:MsgPack.Serialization.SerializerRepository.Register``1(MsgPack.Serialization.MessagePackSerializer{``0})">
            <summary>
            	Register <see cref="T:MsgPack.Serialization.MessagePackSerializer`1"/>.
            </summary>
            <typeparam name="T">The type of serialization target.</typeparam>
            <param name="serializer"><see cref="T:MsgPack.Serialization.MessagePackSerializer`1"/> instance.</param>
            <returns>
            	<c>true</c> if success to register; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="serializer"/> is <c>null</c>.
            </exception>
        </member>
        <member name="P:MsgPack.Serialization.SerializerRepository.Default">
            <summary>
            	Gets the system default repository.
            </summary>
            <value>
            	The system default repository.
            	This value will not be <c>null</c>.
            	Note that the repository is frozen.
            </value>
        </member>
        <member name="T:MsgPack.Serialization.SerializingMember">
            <summary>
            	Represents serializing member information.
            </summary>
        </member>
        <member name="T:MsgPack.Serialization.UnpackHelpers">
            <summary>
            	<strong>This is intened to MsgPack for CLI internal use. Do not use this type from application directly.</strong>
            	Defines serialization helper APIs.
            </summary>
        </member>
        <member name="M:MsgPack.Serialization.UnpackHelpers.UnpackArrayTo``1(MsgPack.Unpacker,MsgPack.Serialization.MessagePackSerializer{``0},``0[])">
            <summary>
            	Unpacks the array to the specified array.
            </summary>
            <typeparam name="T">The type of the array element.</typeparam>
            <param name="unpacker">The unpacker to unpack the underlying stream.</param>
            <param name="serializer">The serializer to deserialize array.</param>
            <param name="array">The array instance to be filled.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="unpacker"/> is <c>null</c>.
            	Or <paramref name="serializer"/> is <c>null</c>.
            	Or <paramref name="array"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            	<paramref name="unpacker"/> is not in the array header.
            	Or failed to deserialization.
            </exception>
        </member>
        <member name="M:MsgPack.Serialization.UnpackHelpers.UnpackCollectionTo(MsgPack.Unpacker,System.Collections.IEnumerable,System.Action{System.Object})">
            <summary>
            	Unpacks the collection with the specified method as colletion of <see cref="T:MsgPack.MessagePackObject"/>.
            </summary>
            <param name="unpacker">The unpacker to unpack the underlying stream.</param>
            <param name="collection">The non-generic collection instance to be added unpacked elements.</param>
            <param name="addition">The delegate which contains the instance method of the <paramref name="collection"/>. The parameter is unpacked object.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="unpacker"/> is <c>null</c>.
            	Or <paramref name="collection"/> is <c>null</c>.
            	Or <paramref name="addition"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            	<paramref name="unpacker"/> is not in the array header.
            	Or failed to deserialization.
            </exception>
        </member>
        <member name="M:MsgPack.Serialization.UnpackHelpers.UnpackCollectionTo``1(MsgPack.Unpacker,MsgPack.Serialization.MessagePackSerializer{``0},System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            	Unpacks the dictionary with the specified method as colletion of <see cref="T:MsgPack.MessagePackObject"/>.
            </summary>
            <typeparam name="T">The type of elements.</typeparam>
            <param name="unpacker">The unpacker to unpack the underlying stream.</param>
            <param name="serializer">The serializer to deserialize elements.</param>
            <param name="collection">The generic collection instance to be added unpacked elements.</param>
            <param name="addition">The delegate which contains the instance method of the <paramref name="collection"/>. The parameter is unpacked object.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="unpacker"/> is <c>null</c>.
            	Or <paramref name="serializer"/> is <c>null</c>.
            	Or <paramref name="collection"/> is <c>null</c>.
            	Or <paramref name="addition"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            	<paramref name="unpacker"/> is not in the array header.
            	Or failed to deserialization.
            </exception>
        </member>
        <member name="M:MsgPack.Serialization.UnpackHelpers.UnpackCollectionTo``1(MsgPack.Unpacker,System.Collections.IEnumerable,System.Func{System.Object,``0})">
            <summary>
            	Unpacks the collection with the specified method as colletion of <see cref="T:MsgPack.MessagePackObject"/>.
            </summary>
            <typeparam name="TDiscarded">The return type of Add method.</typeparam>
            <param name="unpacker">The unpacker to unpack the underlying stream.</param>
            <param name="collection">The non-generic collection instance to be added unpacked elements.</param>
            <param name="addition">The delegate which contains the instance method of the <paramref name="collection"/>. The parameter is unpacked object.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="unpacker"/> is <c>null</c>.
            	Or <paramref name="collection"/> is <c>null</c>.
            	Or <paramref name="addition"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            	<paramref name="unpacker"/> is not in the array header.
            	Or failed to deserialization.
            </exception>
        </member>
        <member name="M:MsgPack.Serialization.UnpackHelpers.UnpackCollectionTo``2(MsgPack.Unpacker,MsgPack.Serialization.MessagePackSerializer{``0},System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            	Unpacks the dictionary with the specified method as colletion of <see cref="T:MsgPack.MessagePackObject"/>.
            </summary>
            <typeparam name="T">The type of elements.</typeparam>
            <typeparam name="TDiscarded">The return type of Add method.</typeparam>
            <param name="unpacker">The unpacker to unpack the underlying stream.</param>
            <param name="serializer">The serializer to deserialize elements.</param>
            <param name="collection">The generic collection instance to be added unpacked elements.</param>
            <param name="addition">The delegate which contains the instance method of the <paramref name="collection"/>. The parameter is unpacked object.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="unpacker"/> is <c>null</c>.
            	Or <paramref name="serializer"/> is <c>null</c>.
            	Or <paramref name="collection"/> is <c>null</c>.
            	Or <paramref name="addition"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            	<paramref name="unpacker"/> is not in the array header.
            	Or failed to deserialization.
            </exception>
        </member>
        <member name="M:MsgPack.Serialization.UnpackHelpers.UnpackMapTo``2(MsgPack.Unpacker,MsgPack.Serialization.MessagePackSerializer{``0},MsgPack.Serialization.MessagePackSerializer{``1},System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            	Unpacks the dictionary with the specified method as colletion of <see cref="T:MsgPack.MessagePackObject"/>.
            </summary>
            <typeparam name="TKey">The type of keys.</typeparam>
            <typeparam name="TValue">The type of values.</typeparam>
            <param name="unpacker">The unpacker to unpack the underlying stream.</param>
            <param name="keySerializer">The serializer to deserialize key elements.</param>
            <param name="valueSerializer">The serializer to deserialize value elements.</param>
            <param name="dictionary">The generic dictionary instance to be added unpacked elements.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="unpacker"/> is <c>null</c>.
            	Or <paramref name="keySerializer"/> is <c>null</c>.
            	Or <paramref name="valueSerializer"/> is <c>null</c>.
            	Or <paramref name="dictionary"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            	<paramref name="unpacker"/> is not in the map header.
            	Or failed to deserialization.
            </exception>
        </member>
        <member name="M:MsgPack.Serialization.UnpackHelpers.UnpackMapTo(MsgPack.Unpacker,System.Collections.IDictionary)">
            <summary>
            	Unpacks the dictionary with the specified method as colletion of <see cref="T:MsgPack.MessagePackObject"/>.
            </summary>
            <param name="unpacker">The unpacker to unpack the underlying stream.</param>
            <param name="dictionary">The non-generic dictionary instance to be added unpacked elements.</param>
            <exception cref="T:System.ArgumentNullException">
            	<paramref name="unpacker"/> is <c>null</c>.
            	Or <paramref name="dictionary"/> is <c>null</c>.
            </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">
            	<paramref name="unpacker"/> is not in the map header.
            	Or failed to deserialization.
            </exception>
        </member>
        <member name="M:MsgPack.Serialization.UnpackHelpers.ConvertWithEnsuringNotNull``1(System.Object,System.String,System.Type)">
            <summary>
            	Ensures the boxed type is not null thus it cannot be unboxing.
            </summary>
            <typeparam name="T">The type of the member.</typeparam>
            <param name="boxed">The boxed deserializing value.</param>
            <param name="name">The name of the member.</param>
            <param name="targetType">The type of the target.</param>
            <returns>The unboxed value.</returns>
        </member>
        <member name="M:MsgPack.Serialization.UnpackHelpers.InvokeUnpackFrom``1(MsgPack.Serialization.MessagePackSerializer{``0},MsgPack.Unpacker)">
            <summary>
            	Invokes <see cref="M:MsgPack.Serialization.MessagePackSerializer`1.UnpackFromCore(MsgPack.Unpacker)"/> FAMANDASM method directly.
            </summary>
            <typeparam name="T">The type of deserializing object.</typeparam>
            <param name="serializer">The invocation target <see cref="T:MsgPack.Serialization.MessagePackSerializer`1"/>.</param>
            <param name="unpacker">The unpacker to be passed to the method.</param>
            <returns>A deserialized value.</returns>
        </member>
        <member name="T:System.Collections.Generic.HashSet`1">
            <summary>
            	Compatibility dummy object.
            </summary>
            <typeparam name="T">The type of elements.</typeparam>
        </member>
    </members>
</doc>
