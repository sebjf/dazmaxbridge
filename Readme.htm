<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html><head>
  <meta content="text/html; charset=ISO-8859-1" http-equiv="content-type">
  <title>Daz-to-Max Readme</title></head>

<body>
<br style="font-family: Calibri;">
<span style="font-family: Calibri;">Welcome to the
Daz-to-3DSMax Pipeline</span><br style="font-family: Calibri;">
<br style="font-family: Calibri;">
<span style="font-family: Calibri;">The purpose of this
project is to provide a clean pipeline between Daz and Max, enabling
Daz's&nbsp;rich figure creation tools and content library to be
utilised in powerful 3D modeller and renderer that is Max.<br>
<br>
<span style="font-weight: bold;">Overview</span><br>
<br>
This project consists of four components:<br>
</span>
<ul style="font-family: Calibri;">
  <li><span style="font-weight: bold;">The Daz Plugin</span><br>
This unmanaged C++ plugin appears to Daz as an exporter, based on a
QObject (Daz uses Qt throughout). It is responsible for collecting the
data from Daz via the Daz provided SDK and packing it into a binary
stream.</li>
  <li><span style="font-weight: bold;">The Serialiser</span><br>
MessagePack is a cross-language serialiser/deserialiser/message
interchange format similar to JSON that can be used to exchange binary
data. Implementations of it in C++ and C# are used to get the scene
data between the Daz Plugin and the managed layer. It handles all the
serialisation, deserialisation, and file layout.</li>
  <li><span style="font-weight: bold;">The Managed
Layer</span><br>
Once the plugin has packed the scene data, the <span style="font-style: italic;">managed</span> <span style="font-style: italic;">layer</span> uses
MessagePack to unpack them into a structure in 'managed space' that can
be accessed by CLR based programs (guess which ones...)</li>
  <li><span style="font-weight: bold;">The MaxScript</span><br>
Finally, a MaxScript script loads the .NET library (the managed layer)
and uses its methods to read the scene data into Max, using the Max API
to create and configure objects.</li>
</ul>
<span style="font-family: Calibri;">Project Status</span><br style="font-family: Calibri;">
<br style="font-family: Calibri;">
<span style="font-family: Calibri;">The project has not
been released (that means it isn't anywhere near an alpha stage let
alone anywhere else)</span><br style="font-family: Calibri;">
<br style="font-family: Calibri;">
<br>
<span style="font-weight: bold;">The Daz Plugin</span><br>
<p></p>
<p style="font-weight: bold;">The Managed Layer</p>
<p>The managed layer should do as little as possible, as it is
intended only as a tool to for MaxScript to interact with the data
structure provided by the Daz plugin. To put it another way, if a third
application, such as Blender, were to be supported, a new Blender
plugin would be created that used a MessagePack implementation to read
the data provided by the Daz plugin, rather than use the managed layer.</p>
<p>Its responsibilities are:</p>
<p>1. Deserialise the stream (as MaxScript does not have a
MessagePack implementation)</p>
<p>2. Present the data using a small subset of basic types (as
expanded on below, MaxScript supports transferring only simple types
between it and .NET)</p>
<p>This allows the managed layer to be highly coupled to the
MaxScript implementation to make both as simple as possible.</p>
<p></p>
<p style="font-weight: bold;">
The MaxScript</p>
<p>
The MaxScript script is the last stage and the one that creates and
configures the objects in 3DS Max. MaxScript has the ability to load
.NET DLLs, create objects, and interact with their methods and
properties. This opens up a great deal of functionality beyond
MaxScript, for example, creating tools to speed up tasks such as image
processing. Passing data between .NET and MaxScript however is limited
to a few basic types (numbers &amp; strings) with no support for
arbitrary data types.&nbsp;</p>
<p>MaxScript then has four responsibilities:</p>
<p>1.&nbsp;Pull the data from the library in the form of
basic value types and unpack it into 3DSMax native types (e.g. float[3]
to Point3)</p>
<p>2. Convert all the 0 based indices to 1 based indices</p>
<p>3.&nbsp;Create the 3DSMax objects (meshes, materials,
skins)</p>
<p>4. Convert Daz settings to Max settings</p>
<p>The interpretation of values such as opacity, and specular
power, will change between renderers and applications, so the final
stage is to convert these material parameters from Daz to Max. This is
done in MaxScript as well.</p>
MaxScript is by far the slowest stage of the pipeline. It could be
replaced with a C++ plugin (Autodesk provide an SDK) - the
functionality in the script is not complex - which would increase speed
significantly, however Maxscript does have some advantages:<br>
<br>
1. It is compatiable with all versions of 3DS Max (plugins must be
recompiled)<br>
2. It allows each user to edit how the data is used (e.g. new material
types or skinning techniques) without needing the plugin source<br><br><br style="font-weight: bold;"><span style="font-weight: bold;">To Do List</span><br><br>1. Complete Standard Properties Mapping in MaxScript<br>2. Use QMetaObject to process DzShaderMaterials<br>3. Add Proper Error Checking<br>4. Manually Increase MaxScript Heap Size&nbsp;to improve performance of first run<br>
</body></html>